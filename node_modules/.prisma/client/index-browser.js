
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.9.0
 * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
 */
Prisma.prismaVersion = {
  client: "4.9.0",
  engine: "ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ApplicationScalarFieldEnum = makeEnum({
  id: 'id',
  job_id: 'job_id',
  seeker_id: 'seeker_id',
  seeker_notes: 'seeker_notes',
  company_notes: 'company_notes',
  seeker_interest_level: 'seeker_interest_level',
  company_interest_level: 'company_interest_level'
});

exports.Prisma.EducationScalarFieldEnum = makeEnum({
  id: 'id',
  seeker_id: 'seeker_id',
  school: 'school',
  location: 'location',
  degree: 'degree',
  major: 'major',
  graduate: 'graduate',
  graduation_date: 'graduation_date'
});

exports.Prisma.JobScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  company_id: 'company_id',
  description: 'description',
  salary: 'salary',
  location: 'location',
  close_date: 'close_date',
  experience_type: 'experience_type',
  employment_type: 'employment_type',
  jobsite: 'jobsite'
});

exports.Prisma.MeetingScalarFieldEnum = makeEnum({
  id: 'id',
  seeker_id: 'seeker_id',
  company_id: 'company_id',
  start_time: 'start_time',
  end_time: 'end_time',
  description: 'description',
  application_id: 'application_id',
  canceled: 'canceled',
  seeker_accepted: 'seeker_accepted',
  private: 'private',
  title: 'title'
});

exports.Prisma.NotificationScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  type: 'type',
  details: 'details',
  read: 'read'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SkillScalarFieldEnum = makeEnum({
  id: 'id',
  job_id: 'job_id',
  seeker_id: 'seeker_id',
  skill: 'skill'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  password: 'password',
  company_name: 'company_name',
  role: 'role',
  image_url: 'image_url',
  address: 'address',
  address_2: 'address_2',
  city: 'city',
  state: 'state',
  zip_code: 'zip_code'
});

exports.Prisma.Work_ExperienceScalarFieldEnum = makeEnum({
  id: 'id',
  seeker_id: 'seeker_id',
  job_details: 'job_details',
  company_name: 'company_name',
  location: 'location',
  start_date: 'start_date',
  end_date: 'end_date'
});


exports.Prisma.ModelName = makeEnum({
  Application: 'Application',
  Education: 'Education',
  Job: 'Job',
  Meeting: 'Meeting',
  Skill: 'Skill',
  User: 'User',
  Work_Experience: 'Work_Experience',
  Notification: 'Notification'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
