
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Application
 * 
 */
export type Application = {
  id: number
  job_id: number | null
  seeker_id: number | null
  seeker_notes: string | null
  company_notes: string | null
  seeker_interest_level: string | null
  company_interest_level: string | null
}

/**
 * Model Education
 * 
 */
export type Education = {
  id: number
  seeker_id: number | null
  school: string | null
  location: string | null
  degree: string | null
  major: string | null
  graduate: boolean | null
  graduation_date: Date | null
}

/**
 * Model Job
 * 
 */
export type Job = {
  id: number
  name: string | null
  company_id: number | null
  description: string | null
  salary: number | null
  location: string | null
  close_date: Date | null
  experience_type: string | null
  employment_type: string | null
  jobsite: string | null
}

/**
 * Model Meeting
 * 
 */
export type Meeting = {
  id: number
  seeker_id: number | null
  company_id: number | null
  start_time: Date | null
  end_time: Date | null
  description: string | null
  application_id: number | null
  canceled: boolean | null
  seeker_accepted: boolean | null
  private: boolean | null
  title: string | null
}

/**
 * Model Skill
 * 
 */
export type Skill = {
  id: number
  job_id: number | null
  seeker_id: number | null
  skill: string | null
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  first_name: string | null
  last_name: string | null
  email: string
  password: string
  company_name: string | null
  role: string | null
  image_url: string | null
  address: string | null
  address_2: string | null
  city: string | null
  state: string | null
  zip_code: string | null
}

/**
 * Model Work_Experience
 * 
 */
export type Work_Experience = {
  id: number
  seeker_id: number | null
  job_details: string | null
  company_name: string | null
  location: string | null
  start_date: Date | null
  end_date: Date | null
}

/**
 * Model Notification
 * 
 */
export type Notification = {
  id: number
  user_id: number | null
  type: string | null
  details: string | null
  read: boolean | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Applications
 * const applications = await prisma.application.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Applications
   * const applications = await prisma.application.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<GlobalReject>;

  /**
   * `prisma.education`: Exposes CRUD operations for the **Education** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Educations
    * const educations = await prisma.education.findMany()
    * ```
    */
  get education(): Prisma.EducationDelegate<GlobalReject>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<GlobalReject>;

  /**
   * `prisma.meeting`: Exposes CRUD operations for the **Meeting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meetings
    * const meetings = await prisma.meeting.findMany()
    * ```
    */
  get meeting(): Prisma.MeetingDelegate<GlobalReject>;

  /**
   * `prisma.skill`: Exposes CRUD operations for the **Skill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skill.findMany()
    * ```
    */
  get skill(): Prisma.SkillDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.work_Experience`: Exposes CRUD operations for the **Work_Experience** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Work_Experiences
    * const work_Experiences = await prisma.work_Experience.findMany()
    * ```
    */
  get work_Experience(): Prisma.Work_ExperienceDelegate<GlobalReject>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Application: 'Application',
    Education: 'Education',
    Job: 'Job',
    Meeting: 'Meeting',
    Skill: 'Skill',
    User: 'User',
    Work_Experience: 'Work_Experience',
    Notification: 'Notification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ApplicationCountOutputType
   */


  export type ApplicationCountOutputType = {
    Meeting: number
  }

  export type ApplicationCountOutputTypeSelect = {
    Meeting?: boolean
  }

  export type ApplicationCountOutputTypeGetPayload<S extends boolean | null | undefined | ApplicationCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ApplicationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ApplicationCountOutputTypeArgs)
    ? ApplicationCountOutputType 
    : S extends { select: any } & (ApplicationCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ApplicationCountOutputType ? ApplicationCountOutputType[P] : never
  } 
      : ApplicationCountOutputType




  // Custom InputTypes

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ApplicationCountOutputType
     */
    select?: ApplicationCountOutputTypeSelect | null
  }



  /**
   * Count Type JobCountOutputType
   */


  export type JobCountOutputType = {
    Application: number
    Skill: number
  }

  export type JobCountOutputTypeSelect = {
    Application?: boolean
    Skill?: boolean
  }

  export type JobCountOutputTypeGetPayload<S extends boolean | null | undefined | JobCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? JobCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (JobCountOutputTypeArgs)
    ? JobCountOutputType 
    : S extends { select: any } & (JobCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof JobCountOutputType ? JobCountOutputType[P] : never
  } 
      : JobCountOutputType




  // Custom InputTypes

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Application: number
    Education: number
    Job: number
    Meeting_Meeting_company_idToUser: number
    Meeting_Meeting_seeker_idToUser: number
    Notification: number
    Skill: number
    Work_Experience: number
  }

  export type UserCountOutputTypeSelect = {
    Application?: boolean
    Education?: boolean
    Job?: boolean
    Meeting_Meeting_company_idToUser?: boolean
    Meeting_Meeting_seeker_idToUser?: boolean
    Notification?: boolean
    Skill?: boolean
    Work_Experience?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Application
   */


  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationAvgAggregateOutputType = {
    id: number | null
    job_id: number | null
    seeker_id: number | null
  }

  export type ApplicationSumAggregateOutputType = {
    id: number | null
    job_id: number | null
    seeker_id: number | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: number | null
    job_id: number | null
    seeker_id: number | null
    seeker_notes: string | null
    company_notes: string | null
    seeker_interest_level: string | null
    company_interest_level: string | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: number | null
    job_id: number | null
    seeker_id: number | null
    seeker_notes: string | null
    company_notes: string | null
    seeker_interest_level: string | null
    company_interest_level: string | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    job_id: number
    seeker_id: number
    seeker_notes: number
    company_notes: number
    seeker_interest_level: number
    company_interest_level: number
    _all: number
  }


  export type ApplicationAvgAggregateInputType = {
    id?: true
    job_id?: true
    seeker_id?: true
  }

  export type ApplicationSumAggregateInputType = {
    id?: true
    job_id?: true
    seeker_id?: true
  }

  export type ApplicationMinAggregateInputType = {
    id?: true
    job_id?: true
    seeker_id?: true
    seeker_notes?: true
    company_notes?: true
    seeker_interest_level?: true
    company_interest_level?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    job_id?: true
    seeker_id?: true
    seeker_notes?: true
    company_notes?: true
    seeker_interest_level?: true
    company_interest_level?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    job_id?: true
    seeker_id?: true
    seeker_notes?: true
    company_notes?: true
    seeker_interest_level?: true
    company_interest_level?: true
    _all?: true
  }

  export type ApplicationAggregateArgs = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs = {
    where?: ApplicationWhereInput
    orderBy?: Enumerable<ApplicationOrderByWithAggregationInput>
    by: ApplicationScalarFieldEnum[]
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _avg?: ApplicationAvgAggregateInputType
    _sum?: ApplicationSumAggregateInputType
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }


  export type ApplicationGroupByOutputType = {
    id: number
    job_id: number | null
    seeker_id: number | null
    seeker_notes: string | null
    company_notes: string | null
    seeker_interest_level: string | null
    company_interest_level: string | null
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect = {
    id?: boolean
    job_id?: boolean
    seeker_id?: boolean
    seeker_notes?: boolean
    company_notes?: boolean
    seeker_interest_level?: boolean
    company_interest_level?: boolean
    Job?: boolean | JobArgs
    User?: boolean | UserArgs
    Meeting?: boolean | Application$MeetingArgs
    _count?: boolean | ApplicationCountOutputTypeArgs
  }


  export type ApplicationInclude = {
    Job?: boolean | JobArgs
    User?: boolean | UserArgs
    Meeting?: boolean | Application$MeetingArgs
    _count?: boolean | ApplicationCountOutputTypeArgs
  }

  export type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Application :
    S extends undefined ? never :
    S extends { include: any } & (ApplicationArgs | ApplicationFindManyArgs)
    ? Application  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Job' ? JobGetPayload<S['include'][P]> | null :
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :
        P extends 'Meeting' ? Array < MeetingGetPayload<S['include'][P]>>  :
        P extends '_count' ? ApplicationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ApplicationArgs | ApplicationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Job' ? JobGetPayload<S['select'][P]> | null :
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :
        P extends 'Meeting' ? Array < MeetingGetPayload<S['select'][P]>>  :
        P extends '_count' ? ApplicationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Application ? Application[P] : never
  } 
      : Application


  type ApplicationCountArgs = 
    Omit<ApplicationFindManyArgs, 'select' | 'include'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApplicationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ApplicationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Application'> extends True ? Prisma__ApplicationClient<ApplicationGetPayload<T>> : Prisma__ApplicationClient<ApplicationGetPayload<T> | null, null>

    /**
     * Find one Application that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ApplicationFindUniqueOrThrowArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApplicationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ApplicationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Application'> extends True ? Prisma__ApplicationClient<ApplicationGetPayload<T>> : Prisma__ApplicationClient<ApplicationGetPayload<T> | null, null>

    /**
     * Find the first Application that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApplicationFindManyArgs>(
      args?: SelectSubset<T, ApplicationFindManyArgs>
    ): PrismaPromise<Array<ApplicationGetPayload<T>>>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
    **/
    create<T extends ApplicationCreateArgs>(
      args: SelectSubset<T, ApplicationCreateArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Create many Applications.
     *     @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     *     @example
     *     // Create many Applications
     *     const application = await prisma.application.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApplicationCreateManyArgs>(
      args?: SelectSubset<T, ApplicationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
    **/
    delete<T extends ApplicationDeleteArgs>(
      args: SelectSubset<T, ApplicationDeleteArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApplicationUpdateArgs>(
      args: SelectSubset<T, ApplicationUpdateArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApplicationDeleteManyArgs>(
      args?: SelectSubset<T, ApplicationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApplicationUpdateManyArgs>(
      args: SelectSubset<T, ApplicationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
    **/
    upsert<T extends ApplicationUpsertArgs>(
      args: SelectSubset<T, ApplicationUpsertArgs>
    ): Prisma__ApplicationClient<ApplicationGetPayload<T>>

    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ApplicationClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Job<T extends JobArgs= {}>(args?: Subset<T, JobArgs>): Prisma__JobClient<JobGetPayload<T> | Null>;

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Meeting<T extends Application$MeetingArgs= {}>(args?: Subset<T, Application$MeetingArgs>): PrismaPromise<Array<MeetingGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Application base type for findUnique actions
   */
  export type ApplicationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findUnique
   */
  export interface ApplicationFindUniqueArgs extends ApplicationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application base type for findFirst actions
   */
  export type ApplicationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: Enumerable<ApplicationScalarFieldEnum>
  }

  /**
   * Application findFirst
   */
  export interface ApplicationFindFirstArgs extends ApplicationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: Enumerable<ApplicationScalarFieldEnum>
  }


  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: Enumerable<ApplicationScalarFieldEnum>
  }


  /**
   * Application create
   */
  export type ApplicationCreateArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }


  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs = {
    /**
     * The data used to create many Applications.
     */
    data: Enumerable<ApplicationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Application update
   */
  export type ApplicationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
  }


  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }


  /**
   * Application delete
   */
  export type ApplicationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
  }


  /**
   * Application.Meeting
   */
  export type Application$MeetingArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    where?: MeetingWhereInput
    orderBy?: Enumerable<MeetingOrderByWithRelationInput>
    cursor?: MeetingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MeetingScalarFieldEnum>
  }


  /**
   * Application without action
   */
  export type ApplicationArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
  }



  /**
   * Model Education
   */


  export type AggregateEducation = {
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  export type EducationAvgAggregateOutputType = {
    id: number | null
    seeker_id: number | null
  }

  export type EducationSumAggregateOutputType = {
    id: number | null
    seeker_id: number | null
  }

  export type EducationMinAggregateOutputType = {
    id: number | null
    seeker_id: number | null
    school: string | null
    location: string | null
    degree: string | null
    major: string | null
    graduate: boolean | null
    graduation_date: Date | null
  }

  export type EducationMaxAggregateOutputType = {
    id: number | null
    seeker_id: number | null
    school: string | null
    location: string | null
    degree: string | null
    major: string | null
    graduate: boolean | null
    graduation_date: Date | null
  }

  export type EducationCountAggregateOutputType = {
    id: number
    seeker_id: number
    school: number
    location: number
    degree: number
    major: number
    graduate: number
    graduation_date: number
    _all: number
  }


  export type EducationAvgAggregateInputType = {
    id?: true
    seeker_id?: true
  }

  export type EducationSumAggregateInputType = {
    id?: true
    seeker_id?: true
  }

  export type EducationMinAggregateInputType = {
    id?: true
    seeker_id?: true
    school?: true
    location?: true
    degree?: true
    major?: true
    graduate?: true
    graduation_date?: true
  }

  export type EducationMaxAggregateInputType = {
    id?: true
    seeker_id?: true
    school?: true
    location?: true
    degree?: true
    major?: true
    graduate?: true
    graduation_date?: true
  }

  export type EducationCountAggregateInputType = {
    id?: true
    seeker_id?: true
    school?: true
    location?: true
    degree?: true
    major?: true
    graduate?: true
    graduation_date?: true
    _all?: true
  }

  export type EducationAggregateArgs = {
    /**
     * Filter which Education to aggregate.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Educations
    **/
    _count?: true | EducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EducationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EducationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EducationMaxAggregateInputType
  }

  export type GetEducationAggregateType<T extends EducationAggregateArgs> = {
        [P in keyof T & keyof AggregateEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEducation[P]>
      : GetScalarType<T[P], AggregateEducation[P]>
  }




  export type EducationGroupByArgs = {
    where?: EducationWhereInput
    orderBy?: Enumerable<EducationOrderByWithAggregationInput>
    by: EducationScalarFieldEnum[]
    having?: EducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EducationCountAggregateInputType | true
    _avg?: EducationAvgAggregateInputType
    _sum?: EducationSumAggregateInputType
    _min?: EducationMinAggregateInputType
    _max?: EducationMaxAggregateInputType
  }


  export type EducationGroupByOutputType = {
    id: number
    seeker_id: number | null
    school: string | null
    location: string | null
    degree: string | null
    major: string | null
    graduate: boolean | null
    graduation_date: Date | null
    _count: EducationCountAggregateOutputType | null
    _avg: EducationAvgAggregateOutputType | null
    _sum: EducationSumAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  type GetEducationGroupByPayload<T extends EducationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EducationGroupByOutputType[P]>
            : GetScalarType<T[P], EducationGroupByOutputType[P]>
        }
      >
    >


  export type EducationSelect = {
    id?: boolean
    seeker_id?: boolean
    school?: boolean
    location?: boolean
    degree?: boolean
    major?: boolean
    graduate?: boolean
    graduation_date?: boolean
    User?: boolean | UserArgs
  }


  export type EducationInclude = {
    User?: boolean | UserArgs
  }

  export type EducationGetPayload<S extends boolean | null | undefined | EducationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Education :
    S extends undefined ? never :
    S extends { include: any } & (EducationArgs | EducationFindManyArgs)
    ? Education  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (EducationArgs | EducationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Education ? Education[P] : never
  } 
      : Education


  type EducationCountArgs = 
    Omit<EducationFindManyArgs, 'select' | 'include'> & {
      select?: EducationCountAggregateInputType | true
    }

  export interface EducationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Education that matches the filter.
     * @param {EducationFindUniqueArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EducationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EducationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Education'> extends True ? Prisma__EducationClient<EducationGetPayload<T>> : Prisma__EducationClient<EducationGetPayload<T> | null, null>

    /**
     * Find one Education that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EducationFindUniqueOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EducationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EducationFindUniqueOrThrowArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Find the first Education that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EducationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EducationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Education'> extends True ? Prisma__EducationClient<EducationGetPayload<T>> : Prisma__EducationClient<EducationGetPayload<T> | null, null>

    /**
     * Find the first Education that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EducationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EducationFindFirstOrThrowArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Find zero or more Educations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Educations
     * const educations = await prisma.education.findMany()
     * 
     * // Get first 10 Educations
     * const educations = await prisma.education.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const educationWithIdOnly = await prisma.education.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EducationFindManyArgs>(
      args?: SelectSubset<T, EducationFindManyArgs>
    ): PrismaPromise<Array<EducationGetPayload<T>>>

    /**
     * Create a Education.
     * @param {EducationCreateArgs} args - Arguments to create a Education.
     * @example
     * // Create one Education
     * const Education = await prisma.education.create({
     *   data: {
     *     // ... data to create a Education
     *   }
     * })
     * 
    **/
    create<T extends EducationCreateArgs>(
      args: SelectSubset<T, EducationCreateArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Create many Educations.
     *     @param {EducationCreateManyArgs} args - Arguments to create many Educations.
     *     @example
     *     // Create many Educations
     *     const education = await prisma.education.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EducationCreateManyArgs>(
      args?: SelectSubset<T, EducationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Education.
     * @param {EducationDeleteArgs} args - Arguments to delete one Education.
     * @example
     * // Delete one Education
     * const Education = await prisma.education.delete({
     *   where: {
     *     // ... filter to delete one Education
     *   }
     * })
     * 
    **/
    delete<T extends EducationDeleteArgs>(
      args: SelectSubset<T, EducationDeleteArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Update one Education.
     * @param {EducationUpdateArgs} args - Arguments to update one Education.
     * @example
     * // Update one Education
     * const education = await prisma.education.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EducationUpdateArgs>(
      args: SelectSubset<T, EducationUpdateArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Delete zero or more Educations.
     * @param {EducationDeleteManyArgs} args - Arguments to filter Educations to delete.
     * @example
     * // Delete a few Educations
     * const { count } = await prisma.education.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EducationDeleteManyArgs>(
      args?: SelectSubset<T, EducationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Educations
     * const education = await prisma.education.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EducationUpdateManyArgs>(
      args: SelectSubset<T, EducationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Education.
     * @param {EducationUpsertArgs} args - Arguments to update or create a Education.
     * @example
     * // Update or create a Education
     * const education = await prisma.education.upsert({
     *   create: {
     *     // ... data to create a Education
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Education we want to update
     *   }
     * })
    **/
    upsert<T extends EducationUpsertArgs>(
      args: SelectSubset<T, EducationUpsertArgs>
    ): Prisma__EducationClient<EducationGetPayload<T>>

    /**
     * Count the number of Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationCountArgs} args - Arguments to filter Educations to count.
     * @example
     * // Count the number of Educations
     * const count = await prisma.education.count({
     *   where: {
     *     // ... the filter for the Educations we want to count
     *   }
     * })
    **/
    count<T extends EducationCountArgs>(
      args?: Subset<T, EducationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EducationAggregateArgs>(args: Subset<T, EducationAggregateArgs>): PrismaPromise<GetEducationAggregateType<T>>

    /**
     * Group by Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EducationGroupByArgs['orderBy'] }
        : { orderBy?: EducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEducationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Education.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EducationClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Education base type for findUnique actions
   */
  export type EducationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }

  /**
   * Education findUnique
   */
  export interface EducationFindUniqueArgs extends EducationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Education findUniqueOrThrow
   */
  export type EducationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }


  /**
   * Education base type for findFirst actions
   */
  export type EducationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: Enumerable<EducationScalarFieldEnum>
  }

  /**
   * Education findFirst
   */
  export interface EducationFindFirstArgs extends EducationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Education findFirstOrThrow
   */
  export type EducationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: Enumerable<EducationScalarFieldEnum>
  }


  /**
   * Education findMany
   */
  export type EducationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter, which Educations to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    distinct?: Enumerable<EducationScalarFieldEnum>
  }


  /**
   * Education create
   */
  export type EducationCreateArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * The data needed to create a Education.
     */
    data: XOR<EducationCreateInput, EducationUncheckedCreateInput>
  }


  /**
   * Education createMany
   */
  export type EducationCreateManyArgs = {
    /**
     * The data used to create many Educations.
     */
    data: Enumerable<EducationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Education update
   */
  export type EducationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * The data needed to update a Education.
     */
    data: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
    /**
     * Choose, which Education to update.
     */
    where: EducationWhereUniqueInput
  }


  /**
   * Education updateMany
   */
  export type EducationUpdateManyArgs = {
    /**
     * The data used to update Educations.
     */
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyInput>
    /**
     * Filter which Educations to update
     */
    where?: EducationWhereInput
  }


  /**
   * Education upsert
   */
  export type EducationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * The filter to search for the Education to update in case it exists.
     */
    where: EducationWhereUniqueInput
    /**
     * In case the Education found by the `where` argument doesn't exist, create a new Education with this data.
     */
    create: XOR<EducationCreateInput, EducationUncheckedCreateInput>
    /**
     * In case the Education was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
  }


  /**
   * Education delete
   */
  export type EducationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    /**
     * Filter which Education to delete.
     */
    where: EducationWhereUniqueInput
  }


  /**
   * Education deleteMany
   */
  export type EducationDeleteManyArgs = {
    /**
     * Filter which Educations to delete
     */
    where?: EducationWhereInput
  }


  /**
   * Education without action
   */
  export type EducationArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
  }



  /**
   * Model Job
   */


  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    id: number | null
    company_id: number | null
    salary: number | null
  }

  export type JobSumAggregateOutputType = {
    id: number | null
    company_id: number | null
    salary: number | null
  }

  export type JobMinAggregateOutputType = {
    id: number | null
    name: string | null
    company_id: number | null
    description: string | null
    salary: number | null
    location: string | null
    close_date: Date | null
    experience_type: string | null
    employment_type: string | null
    jobsite: string | null
  }

  export type JobMaxAggregateOutputType = {
    id: number | null
    name: string | null
    company_id: number | null
    description: string | null
    salary: number | null
    location: string | null
    close_date: Date | null
    experience_type: string | null
    employment_type: string | null
    jobsite: string | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    name: number
    company_id: number
    description: number
    salary: number
    location: number
    close_date: number
    experience_type: number
    employment_type: number
    jobsite: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    id?: true
    company_id?: true
    salary?: true
  }

  export type JobSumAggregateInputType = {
    id?: true
    company_id?: true
    salary?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    name?: true
    company_id?: true
    description?: true
    salary?: true
    location?: true
    close_date?: true
    experience_type?: true
    employment_type?: true
    jobsite?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    name?: true
    company_id?: true
    description?: true
    salary?: true
    location?: true
    close_date?: true
    experience_type?: true
    employment_type?: true
    jobsite?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    name?: true
    company_id?: true
    description?: true
    salary?: true
    location?: true
    close_date?: true
    experience_type?: true
    employment_type?: true
    jobsite?: true
    _all?: true
  }

  export type JobAggregateArgs = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: Enumerable<JobOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs = {
    where?: JobWhereInput
    orderBy?: Enumerable<JobOrderByWithAggregationInput>
    by: JobScalarFieldEnum[]
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }


  export type JobGroupByOutputType = {
    id: number
    name: string | null
    company_id: number | null
    description: string | null
    salary: number | null
    location: string | null
    close_date: Date | null
    experience_type: string | null
    employment_type: string | null
    jobsite: string | null
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = PrismaPromise<
    Array<
      PickArray<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect = {
    id?: boolean
    name?: boolean
    company_id?: boolean
    description?: boolean
    salary?: boolean
    location?: boolean
    close_date?: boolean
    experience_type?: boolean
    employment_type?: boolean
    jobsite?: boolean
    Application?: boolean | Job$ApplicationArgs
    User?: boolean | UserArgs
    Skill?: boolean | Job$SkillArgs
    _count?: boolean | JobCountOutputTypeArgs
  }


  export type JobInclude = {
    Application?: boolean | Job$ApplicationArgs
    User?: boolean | UserArgs
    Skill?: boolean | Job$SkillArgs
    _count?: boolean | JobCountOutputTypeArgs
  }

  export type JobGetPayload<S extends boolean | null | undefined | JobArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Job :
    S extends undefined ? never :
    S extends { include: any } & (JobArgs | JobFindManyArgs)
    ? Job  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Application' ? Array < ApplicationGetPayload<S['include'][P]>>  :
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :
        P extends 'Skill' ? Array < SkillGetPayload<S['include'][P]>>  :
        P extends '_count' ? JobCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (JobArgs | JobFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Application' ? Array < ApplicationGetPayload<S['select'][P]>>  :
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :
        P extends 'Skill' ? Array < SkillGetPayload<S['select'][P]>>  :
        P extends '_count' ? JobCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Job ? Job[P] : never
  } 
      : Job


  type JobCountArgs = 
    Omit<JobFindManyArgs, 'select' | 'include'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JobFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, JobFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Job'> extends True ? Prisma__JobClient<JobGetPayload<T>> : Prisma__JobClient<JobGetPayload<T> | null, null>

    /**
     * Find one Job that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, JobFindUniqueOrThrowArgs>
    ): Prisma__JobClient<JobGetPayload<T>>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JobFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, JobFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Job'> extends True ? Prisma__JobClient<JobGetPayload<T>> : Prisma__JobClient<JobGetPayload<T> | null, null>

    /**
     * Find the first Job that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(
      args?: SelectSubset<T, JobFindFirstOrThrowArgs>
    ): Prisma__JobClient<JobGetPayload<T>>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JobFindManyArgs>(
      args?: SelectSubset<T, JobFindManyArgs>
    ): PrismaPromise<Array<JobGetPayload<T>>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
    **/
    create<T extends JobCreateArgs>(
      args: SelectSubset<T, JobCreateArgs>
    ): Prisma__JobClient<JobGetPayload<T>>

    /**
     * Create many Jobs.
     *     @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     *     @example
     *     // Create many Jobs
     *     const job = await prisma.job.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JobCreateManyArgs>(
      args?: SelectSubset<T, JobCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
    **/
    delete<T extends JobDeleteArgs>(
      args: SelectSubset<T, JobDeleteArgs>
    ): Prisma__JobClient<JobGetPayload<T>>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JobUpdateArgs>(
      args: SelectSubset<T, JobUpdateArgs>
    ): Prisma__JobClient<JobGetPayload<T>>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JobDeleteManyArgs>(
      args?: SelectSubset<T, JobDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JobUpdateManyArgs>(
      args: SelectSubset<T, JobUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
    **/
    upsert<T extends JobUpsertArgs>(
      args: SelectSubset<T, JobUpsertArgs>
    ): Prisma__JobClient<JobGetPayload<T>>

    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JobClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Application<T extends Job$ApplicationArgs= {}>(args?: Subset<T, Job$ApplicationArgs>): PrismaPromise<Array<ApplicationGetPayload<T>>| Null>;

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Skill<T extends Job$SkillArgs= {}>(args?: Subset<T, Job$SkillArgs>): PrismaPromise<Array<SkillGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Job base type for findUnique actions
   */
  export type JobFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobInclude | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUnique
   */
  export interface JobFindUniqueArgs extends JobFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobInclude | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }


  /**
   * Job base type for findFirst actions
   */
  export type JobFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobInclude | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: Enumerable<JobOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: Enumerable<JobScalarFieldEnum>
  }

  /**
   * Job findFirst
   */
  export interface JobFindFirstArgs extends JobFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobInclude | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: Enumerable<JobOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: Enumerable<JobScalarFieldEnum>
  }


  /**
   * Job findMany
   */
  export type JobFindManyArgs = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobInclude | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: Enumerable<JobOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: Enumerable<JobScalarFieldEnum>
  }


  /**
   * Job create
   */
  export type JobCreateArgs = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobInclude | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }


  /**
   * Job createMany
   */
  export type JobCreateManyArgs = {
    /**
     * The data used to create many Jobs.
     */
    data: Enumerable<JobCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Job update
   */
  export type JobUpdateArgs = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobInclude | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }


  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
  }


  /**
   * Job upsert
   */
  export type JobUpsertArgs = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobInclude | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }


  /**
   * Job delete
   */
  export type JobDeleteArgs = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobInclude | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }


  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
  }


  /**
   * Job.Application
   */
  export type Job$ApplicationArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    where?: ApplicationWhereInput
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ApplicationScalarFieldEnum>
  }


  /**
   * Job.Skill
   */
  export type Job$SkillArgs = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
    where?: SkillWhereInput
    orderBy?: Enumerable<SkillOrderByWithRelationInput>
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SkillScalarFieldEnum>
  }


  /**
   * Job without action
   */
  export type JobArgs = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobInclude | null
  }



  /**
   * Model Meeting
   */


  export type AggregateMeeting = {
    _count: MeetingCountAggregateOutputType | null
    _avg: MeetingAvgAggregateOutputType | null
    _sum: MeetingSumAggregateOutputType | null
    _min: MeetingMinAggregateOutputType | null
    _max: MeetingMaxAggregateOutputType | null
  }

  export type MeetingAvgAggregateOutputType = {
    id: number | null
    seeker_id: number | null
    company_id: number | null
    application_id: number | null
  }

  export type MeetingSumAggregateOutputType = {
    id: number | null
    seeker_id: number | null
    company_id: number | null
    application_id: number | null
  }

  export type MeetingMinAggregateOutputType = {
    id: number | null
    seeker_id: number | null
    company_id: number | null
    start_time: Date | null
    end_time: Date | null
    description: string | null
    application_id: number | null
    canceled: boolean | null
    seeker_accepted: boolean | null
    private: boolean | null
    title: string | null
  }

  export type MeetingMaxAggregateOutputType = {
    id: number | null
    seeker_id: number | null
    company_id: number | null
    start_time: Date | null
    end_time: Date | null
    description: string | null
    application_id: number | null
    canceled: boolean | null
    seeker_accepted: boolean | null
    private: boolean | null
    title: string | null
  }

  export type MeetingCountAggregateOutputType = {
    id: number
    seeker_id: number
    company_id: number
    start_time: number
    end_time: number
    description: number
    application_id: number
    canceled: number
    seeker_accepted: number
    private: number
    title: number
    _all: number
  }


  export type MeetingAvgAggregateInputType = {
    id?: true
    seeker_id?: true
    company_id?: true
    application_id?: true
  }

  export type MeetingSumAggregateInputType = {
    id?: true
    seeker_id?: true
    company_id?: true
    application_id?: true
  }

  export type MeetingMinAggregateInputType = {
    id?: true
    seeker_id?: true
    company_id?: true
    start_time?: true
    end_time?: true
    description?: true
    application_id?: true
    canceled?: true
    seeker_accepted?: true
    private?: true
    title?: true
  }

  export type MeetingMaxAggregateInputType = {
    id?: true
    seeker_id?: true
    company_id?: true
    start_time?: true
    end_time?: true
    description?: true
    application_id?: true
    canceled?: true
    seeker_accepted?: true
    private?: true
    title?: true
  }

  export type MeetingCountAggregateInputType = {
    id?: true
    seeker_id?: true
    company_id?: true
    start_time?: true
    end_time?: true
    description?: true
    application_id?: true
    canceled?: true
    seeker_accepted?: true
    private?: true
    title?: true
    _all?: true
  }

  export type MeetingAggregateArgs = {
    /**
     * Filter which Meeting to aggregate.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: Enumerable<MeetingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Meetings
    **/
    _count?: true | MeetingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingMaxAggregateInputType
  }

  export type GetMeetingAggregateType<T extends MeetingAggregateArgs> = {
        [P in keyof T & keyof AggregateMeeting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeeting[P]>
      : GetScalarType<T[P], AggregateMeeting[P]>
  }




  export type MeetingGroupByArgs = {
    where?: MeetingWhereInput
    orderBy?: Enumerable<MeetingOrderByWithAggregationInput>
    by: MeetingScalarFieldEnum[]
    having?: MeetingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingCountAggregateInputType | true
    _avg?: MeetingAvgAggregateInputType
    _sum?: MeetingSumAggregateInputType
    _min?: MeetingMinAggregateInputType
    _max?: MeetingMaxAggregateInputType
  }


  export type MeetingGroupByOutputType = {
    id: number
    seeker_id: number | null
    company_id: number | null
    start_time: Date | null
    end_time: Date | null
    description: string | null
    application_id: number | null
    canceled: boolean | null
    seeker_accepted: boolean | null
    private: boolean | null
    title: string | null
    _count: MeetingCountAggregateOutputType | null
    _avg: MeetingAvgAggregateOutputType | null
    _sum: MeetingSumAggregateOutputType | null
    _min: MeetingMinAggregateOutputType | null
    _max: MeetingMaxAggregateOutputType | null
  }

  type GetMeetingGroupByPayload<T extends MeetingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MeetingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingGroupByOutputType[P]>
        }
      >
    >


  export type MeetingSelect = {
    id?: boolean
    seeker_id?: boolean
    company_id?: boolean
    start_time?: boolean
    end_time?: boolean
    description?: boolean
    application_id?: boolean
    canceled?: boolean
    seeker_accepted?: boolean
    private?: boolean
    title?: boolean
    Application?: boolean | ApplicationArgs
    User_Meeting_company_idToUser?: boolean | UserArgs
    User_Meeting_seeker_idToUser?: boolean | UserArgs
  }


  export type MeetingInclude = {
    Application?: boolean | ApplicationArgs
    User_Meeting_company_idToUser?: boolean | UserArgs
    User_Meeting_seeker_idToUser?: boolean | UserArgs
  }

  export type MeetingGetPayload<S extends boolean | null | undefined | MeetingArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Meeting :
    S extends undefined ? never :
    S extends { include: any } & (MeetingArgs | MeetingFindManyArgs)
    ? Meeting  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Application' ? ApplicationGetPayload<S['include'][P]> | null :
        P extends 'User_Meeting_company_idToUser' ? UserGetPayload<S['include'][P]> | null :
        P extends 'User_Meeting_seeker_idToUser' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (MeetingArgs | MeetingFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Application' ? ApplicationGetPayload<S['select'][P]> | null :
        P extends 'User_Meeting_company_idToUser' ? UserGetPayload<S['select'][P]> | null :
        P extends 'User_Meeting_seeker_idToUser' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Meeting ? Meeting[P] : never
  } 
      : Meeting


  type MeetingCountArgs = 
    Omit<MeetingFindManyArgs, 'select' | 'include'> & {
      select?: MeetingCountAggregateInputType | true
    }

  export interface MeetingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Meeting that matches the filter.
     * @param {MeetingFindUniqueArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeetingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MeetingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Meeting'> extends True ? Prisma__MeetingClient<MeetingGetPayload<T>> : Prisma__MeetingClient<MeetingGetPayload<T> | null, null>

    /**
     * Find one Meeting that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MeetingFindUniqueOrThrowArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MeetingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MeetingFindUniqueOrThrowArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Find the first Meeting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindFirstArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeetingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MeetingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Meeting'> extends True ? Prisma__MeetingClient<MeetingGetPayload<T>> : Prisma__MeetingClient<MeetingGetPayload<T> | null, null>

    /**
     * Find the first Meeting that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindFirstOrThrowArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MeetingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MeetingFindFirstOrThrowArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Find zero or more Meetings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meetings
     * const meetings = await prisma.meeting.findMany()
     * 
     * // Get first 10 Meetings
     * const meetings = await prisma.meeting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingWithIdOnly = await prisma.meeting.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeetingFindManyArgs>(
      args?: SelectSubset<T, MeetingFindManyArgs>
    ): PrismaPromise<Array<MeetingGetPayload<T>>>

    /**
     * Create a Meeting.
     * @param {MeetingCreateArgs} args - Arguments to create a Meeting.
     * @example
     * // Create one Meeting
     * const Meeting = await prisma.meeting.create({
     *   data: {
     *     // ... data to create a Meeting
     *   }
     * })
     * 
    **/
    create<T extends MeetingCreateArgs>(
      args: SelectSubset<T, MeetingCreateArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Create many Meetings.
     *     @param {MeetingCreateManyArgs} args - Arguments to create many Meetings.
     *     @example
     *     // Create many Meetings
     *     const meeting = await prisma.meeting.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MeetingCreateManyArgs>(
      args?: SelectSubset<T, MeetingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Meeting.
     * @param {MeetingDeleteArgs} args - Arguments to delete one Meeting.
     * @example
     * // Delete one Meeting
     * const Meeting = await prisma.meeting.delete({
     *   where: {
     *     // ... filter to delete one Meeting
     *   }
     * })
     * 
    **/
    delete<T extends MeetingDeleteArgs>(
      args: SelectSubset<T, MeetingDeleteArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Update one Meeting.
     * @param {MeetingUpdateArgs} args - Arguments to update one Meeting.
     * @example
     * // Update one Meeting
     * const meeting = await prisma.meeting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeetingUpdateArgs>(
      args: SelectSubset<T, MeetingUpdateArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Delete zero or more Meetings.
     * @param {MeetingDeleteManyArgs} args - Arguments to filter Meetings to delete.
     * @example
     * // Delete a few Meetings
     * const { count } = await prisma.meeting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeetingDeleteManyArgs>(
      args?: SelectSubset<T, MeetingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meetings
     * const meeting = await prisma.meeting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeetingUpdateManyArgs>(
      args: SelectSubset<T, MeetingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Meeting.
     * @param {MeetingUpsertArgs} args - Arguments to update or create a Meeting.
     * @example
     * // Update or create a Meeting
     * const meeting = await prisma.meeting.upsert({
     *   create: {
     *     // ... data to create a Meeting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meeting we want to update
     *   }
     * })
    **/
    upsert<T extends MeetingUpsertArgs>(
      args: SelectSubset<T, MeetingUpsertArgs>
    ): Prisma__MeetingClient<MeetingGetPayload<T>>

    /**
     * Count the number of Meetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingCountArgs} args - Arguments to filter Meetings to count.
     * @example
     * // Count the number of Meetings
     * const count = await prisma.meeting.count({
     *   where: {
     *     // ... the filter for the Meetings we want to count
     *   }
     * })
    **/
    count<T extends MeetingCountArgs>(
      args?: Subset<T, MeetingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingAggregateArgs>(args: Subset<T, MeetingAggregateArgs>): PrismaPromise<GetMeetingAggregateType<T>>

    /**
     * Group by Meeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingGroupByArgs['orderBy'] }
        : { orderBy?: MeetingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Meeting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MeetingClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Application<T extends ApplicationArgs= {}>(args?: Subset<T, ApplicationArgs>): Prisma__ApplicationClient<ApplicationGetPayload<T> | Null>;

    User_Meeting_company_idToUser<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    User_Meeting_seeker_idToUser<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Meeting base type for findUnique actions
   */
  export type MeetingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    /**
     * Filter, which Meeting to fetch.
     */
    where: MeetingWhereUniqueInput
  }

  /**
   * Meeting findUnique
   */
  export interface MeetingFindUniqueArgs extends MeetingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Meeting findUniqueOrThrow
   */
  export type MeetingFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    /**
     * Filter, which Meeting to fetch.
     */
    where: MeetingWhereUniqueInput
  }


  /**
   * Meeting base type for findFirst actions
   */
  export type MeetingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    /**
     * Filter, which Meeting to fetch.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: Enumerable<MeetingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meetings.
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meetings.
     */
    distinct?: Enumerable<MeetingScalarFieldEnum>
  }

  /**
   * Meeting findFirst
   */
  export interface MeetingFindFirstArgs extends MeetingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Meeting findFirstOrThrow
   */
  export type MeetingFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    /**
     * Filter, which Meeting to fetch.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: Enumerable<MeetingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meetings.
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meetings.
     */
    distinct?: Enumerable<MeetingScalarFieldEnum>
  }


  /**
   * Meeting findMany
   */
  export type MeetingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    /**
     * Filter, which Meetings to fetch.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: Enumerable<MeetingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Meetings.
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    distinct?: Enumerable<MeetingScalarFieldEnum>
  }


  /**
   * Meeting create
   */
  export type MeetingCreateArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    /**
     * The data needed to create a Meeting.
     */
    data: XOR<MeetingCreateInput, MeetingUncheckedCreateInput>
  }


  /**
   * Meeting createMany
   */
  export type MeetingCreateManyArgs = {
    /**
     * The data used to create many Meetings.
     */
    data: Enumerable<MeetingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Meeting update
   */
  export type MeetingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    /**
     * The data needed to update a Meeting.
     */
    data: XOR<MeetingUpdateInput, MeetingUncheckedUpdateInput>
    /**
     * Choose, which Meeting to update.
     */
    where: MeetingWhereUniqueInput
  }


  /**
   * Meeting updateMany
   */
  export type MeetingUpdateManyArgs = {
    /**
     * The data used to update Meetings.
     */
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyInput>
    /**
     * Filter which Meetings to update
     */
    where?: MeetingWhereInput
  }


  /**
   * Meeting upsert
   */
  export type MeetingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    /**
     * The filter to search for the Meeting to update in case it exists.
     */
    where: MeetingWhereUniqueInput
    /**
     * In case the Meeting found by the `where` argument doesn't exist, create a new Meeting with this data.
     */
    create: XOR<MeetingCreateInput, MeetingUncheckedCreateInput>
    /**
     * In case the Meeting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingUpdateInput, MeetingUncheckedUpdateInput>
  }


  /**
   * Meeting delete
   */
  export type MeetingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    /**
     * Filter which Meeting to delete.
     */
    where: MeetingWhereUniqueInput
  }


  /**
   * Meeting deleteMany
   */
  export type MeetingDeleteManyArgs = {
    /**
     * Filter which Meetings to delete
     */
    where?: MeetingWhereInput
  }


  /**
   * Meeting without action
   */
  export type MeetingArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
  }



  /**
   * Model Skill
   */


  export type AggregateSkill = {
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  export type SkillAvgAggregateOutputType = {
    id: number | null
    job_id: number | null
    seeker_id: number | null
  }

  export type SkillSumAggregateOutputType = {
    id: number | null
    job_id: number | null
    seeker_id: number | null
  }

  export type SkillMinAggregateOutputType = {
    id: number | null
    job_id: number | null
    seeker_id: number | null
    skill: string | null
  }

  export type SkillMaxAggregateOutputType = {
    id: number | null
    job_id: number | null
    seeker_id: number | null
    skill: string | null
  }

  export type SkillCountAggregateOutputType = {
    id: number
    job_id: number
    seeker_id: number
    skill: number
    _all: number
  }


  export type SkillAvgAggregateInputType = {
    id?: true
    job_id?: true
    seeker_id?: true
  }

  export type SkillSumAggregateInputType = {
    id?: true
    job_id?: true
    seeker_id?: true
  }

  export type SkillMinAggregateInputType = {
    id?: true
    job_id?: true
    seeker_id?: true
    skill?: true
  }

  export type SkillMaxAggregateInputType = {
    id?: true
    job_id?: true
    seeker_id?: true
    skill?: true
  }

  export type SkillCountAggregateInputType = {
    id?: true
    job_id?: true
    seeker_id?: true
    skill?: true
    _all?: true
  }

  export type SkillAggregateArgs = {
    /**
     * Filter which Skill to aggregate.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: Enumerable<SkillOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMaxAggregateInputType
  }

  export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
        [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkill[P]>
      : GetScalarType<T[P], AggregateSkill[P]>
  }




  export type SkillGroupByArgs = {
    where?: SkillWhereInput
    orderBy?: Enumerable<SkillOrderByWithAggregationInput>
    by: SkillScalarFieldEnum[]
    having?: SkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillCountAggregateInputType | true
    _avg?: SkillAvgAggregateInputType
    _sum?: SkillSumAggregateInputType
    _min?: SkillMinAggregateInputType
    _max?: SkillMaxAggregateInputType
  }


  export type SkillGroupByOutputType = {
    id: number
    job_id: number | null
    seeker_id: number | null
    skill: string | null
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  type GetSkillGroupByPayload<T extends SkillGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillGroupByOutputType[P]>
            : GetScalarType<T[P], SkillGroupByOutputType[P]>
        }
      >
    >


  export type SkillSelect = {
    id?: boolean
    job_id?: boolean
    seeker_id?: boolean
    skill?: boolean
    Job?: boolean | JobArgs
    User?: boolean | UserArgs
  }


  export type SkillInclude = {
    Job?: boolean | JobArgs
    User?: boolean | UserArgs
  }

  export type SkillGetPayload<S extends boolean | null | undefined | SkillArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Skill :
    S extends undefined ? never :
    S extends { include: any } & (SkillArgs | SkillFindManyArgs)
    ? Skill  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Job' ? JobGetPayload<S['include'][P]> | null :
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (SkillArgs | SkillFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Job' ? JobGetPayload<S['select'][P]> | null :
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Skill ? Skill[P] : never
  } 
      : Skill


  type SkillCountArgs = 
    Omit<SkillFindManyArgs, 'select' | 'include'> & {
      select?: SkillCountAggregateInputType | true
    }

  export interface SkillDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Skill that matches the filter.
     * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SkillFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SkillFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Skill'> extends True ? Prisma__SkillClient<SkillGetPayload<T>> : Prisma__SkillClient<SkillGetPayload<T> | null, null>

    /**
     * Find one Skill that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SkillFindUniqueOrThrowArgs>
    ): Prisma__SkillClient<SkillGetPayload<T>>

    /**
     * Find the first Skill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SkillFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SkillFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Skill'> extends True ? Prisma__SkillClient<SkillGetPayload<T>> : Prisma__SkillClient<SkillGetPayload<T> | null, null>

    /**
     * Find the first Skill that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SkillFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SkillFindFirstOrThrowArgs>
    ): Prisma__SkillClient<SkillGetPayload<T>>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skill.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SkillFindManyArgs>(
      args?: SelectSubset<T, SkillFindManyArgs>
    ): PrismaPromise<Array<SkillGetPayload<T>>>

    /**
     * Create a Skill.
     * @param {SkillCreateArgs} args - Arguments to create a Skill.
     * @example
     * // Create one Skill
     * const Skill = await prisma.skill.create({
     *   data: {
     *     // ... data to create a Skill
     *   }
     * })
     * 
    **/
    create<T extends SkillCreateArgs>(
      args: SelectSubset<T, SkillCreateArgs>
    ): Prisma__SkillClient<SkillGetPayload<T>>

    /**
     * Create many Skills.
     *     @param {SkillCreateManyArgs} args - Arguments to create many Skills.
     *     @example
     *     // Create many Skills
     *     const skill = await prisma.skill.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SkillCreateManyArgs>(
      args?: SelectSubset<T, SkillCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Skill.
     * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
     * @example
     * // Delete one Skill
     * const Skill = await prisma.skill.delete({
     *   where: {
     *     // ... filter to delete one Skill
     *   }
     * })
     * 
    **/
    delete<T extends SkillDeleteArgs>(
      args: SelectSubset<T, SkillDeleteArgs>
    ): Prisma__SkillClient<SkillGetPayload<T>>

    /**
     * Update one Skill.
     * @param {SkillUpdateArgs} args - Arguments to update one Skill.
     * @example
     * // Update one Skill
     * const skill = await prisma.skill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SkillUpdateArgs>(
      args: SelectSubset<T, SkillUpdateArgs>
    ): Prisma__SkillClient<SkillGetPayload<T>>

    /**
     * Delete zero or more Skills.
     * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SkillDeleteManyArgs>(
      args?: SelectSubset<T, SkillDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SkillUpdateManyArgs>(
      args: SelectSubset<T, SkillUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Skill.
     * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
     * @example
     * // Update or create a Skill
     * const skill = await prisma.skill.upsert({
     *   create: {
     *     // ... data to create a Skill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skill we want to update
     *   }
     * })
    **/
    upsert<T extends SkillUpsertArgs>(
      args: SelectSubset<T, SkillUpsertArgs>
    ): Prisma__SkillClient<SkillGetPayload<T>>

    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skill.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillCountArgs>(
      args?: Subset<T, SkillCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAggregateArgs>(args: Subset<T, SkillAggregateArgs>): PrismaPromise<GetSkillAggregateType<T>>

    /**
     * Group by Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillGroupByArgs['orderBy'] }
        : { orderBy?: SkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Skill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SkillClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Job<T extends JobArgs= {}>(args?: Subset<T, JobArgs>): Prisma__JobClient<JobGetPayload<T> | Null>;

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Skill base type for findUnique actions
   */
  export type SkillFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findUnique
   */
  export interface SkillFindUniqueArgs extends SkillFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Skill findUniqueOrThrow
   */
  export type SkillFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }


  /**
   * Skill base type for findFirst actions
   */
  export type SkillFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: Enumerable<SkillOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: Enumerable<SkillScalarFieldEnum>
  }

  /**
   * Skill findFirst
   */
  export interface SkillFindFirstArgs extends SkillFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Skill findFirstOrThrow
   */
  export type SkillFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: Enumerable<SkillOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: Enumerable<SkillScalarFieldEnum>
  }


  /**
   * Skill findMany
   */
  export type SkillFindManyArgs = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: Enumerable<SkillOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    distinct?: Enumerable<SkillScalarFieldEnum>
  }


  /**
   * Skill create
   */
  export type SkillCreateArgs = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
    /**
     * The data needed to create a Skill.
     */
    data: XOR<SkillCreateInput, SkillUncheckedCreateInput>
  }


  /**
   * Skill createMany
   */
  export type SkillCreateManyArgs = {
    /**
     * The data used to create many Skills.
     */
    data: Enumerable<SkillCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Skill update
   */
  export type SkillUpdateArgs = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
    /**
     * The data needed to update a Skill.
     */
    data: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
    /**
     * Choose, which Skill to update.
     */
    where: SkillWhereUniqueInput
  }


  /**
   * Skill updateMany
   */
  export type SkillUpdateManyArgs = {
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
  }


  /**
   * Skill upsert
   */
  export type SkillUpsertArgs = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
    /**
     * The filter to search for the Skill to update in case it exists.
     */
    where: SkillWhereUniqueInput
    /**
     * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
     */
    create: XOR<SkillCreateInput, SkillUncheckedCreateInput>
    /**
     * In case the Skill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
  }


  /**
   * Skill delete
   */
  export type SkillDeleteArgs = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
    /**
     * Filter which Skill to delete.
     */
    where: SkillWhereUniqueInput
  }


  /**
   * Skill deleteMany
   */
  export type SkillDeleteManyArgs = {
    /**
     * Filter which Skills to delete
     */
    where?: SkillWhereInput
  }


  /**
   * Skill without action
   */
  export type SkillArgs = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    password: string | null
    company_name: string | null
    role: string | null
    image_url: string | null
    address: string | null
    address_2: string | null
    city: string | null
    state: string | null
    zip_code: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    password: string | null
    company_name: string | null
    role: string | null
    image_url: string | null
    address: string | null
    address_2: string | null
    city: string | null
    state: string | null
    zip_code: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    email: number
    password: number
    company_name: number
    role: number
    image_url: number
    address: number
    address_2: number
    city: number
    state: number
    zip_code: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    company_name?: true
    role?: true
    image_url?: true
    address?: true
    address_2?: true
    city?: true
    state?: true
    zip_code?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    company_name?: true
    role?: true
    image_url?: true
    address?: true
    address_2?: true
    city?: true
    state?: true
    zip_code?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    company_name?: true
    role?: true
    image_url?: true
    address?: true
    address_2?: true
    city?: true
    state?: true
    zip_code?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    first_name: string | null
    last_name: string | null
    email: string
    password: string
    company_name: string | null
    role: string | null
    image_url: string | null
    address: string | null
    address_2: string | null
    city: string | null
    state: string | null
    zip_code: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    password?: boolean
    company_name?: boolean
    role?: boolean
    image_url?: boolean
    address?: boolean
    address_2?: boolean
    city?: boolean
    state?: boolean
    zip_code?: boolean
    Application?: boolean | User$ApplicationArgs
    Education?: boolean | User$EducationArgs
    Job?: boolean | User$JobArgs
    Meeting_Meeting_company_idToUser?: boolean | User$Meeting_Meeting_company_idToUserArgs
    Meeting_Meeting_seeker_idToUser?: boolean | User$Meeting_Meeting_seeker_idToUserArgs
    Notification?: boolean | User$NotificationArgs
    Skill?: boolean | User$SkillArgs
    Work_Experience?: boolean | User$Work_ExperienceArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    Application?: boolean | User$ApplicationArgs
    Education?: boolean | User$EducationArgs
    Job?: boolean | User$JobArgs
    Meeting_Meeting_company_idToUser?: boolean | User$Meeting_Meeting_company_idToUserArgs
    Meeting_Meeting_seeker_idToUser?: boolean | User$Meeting_Meeting_seeker_idToUserArgs
    Notification?: boolean | User$NotificationArgs
    Skill?: boolean | User$SkillArgs
    Work_Experience?: boolean | User$Work_ExperienceArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Application' ? Array < ApplicationGetPayload<S['include'][P]>>  :
        P extends 'Education' ? Array < EducationGetPayload<S['include'][P]>>  :
        P extends 'Job' ? Array < JobGetPayload<S['include'][P]>>  :
        P extends 'Meeting_Meeting_company_idToUser' ? Array < MeetingGetPayload<S['include'][P]>>  :
        P extends 'Meeting_Meeting_seeker_idToUser' ? Array < MeetingGetPayload<S['include'][P]>>  :
        P extends 'Notification' ? Array < NotificationGetPayload<S['include'][P]>>  :
        P extends 'Skill' ? Array < SkillGetPayload<S['include'][P]>>  :
        P extends 'Work_Experience' ? Array < Work_ExperienceGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Application' ? Array < ApplicationGetPayload<S['select'][P]>>  :
        P extends 'Education' ? Array < EducationGetPayload<S['select'][P]>>  :
        P extends 'Job' ? Array < JobGetPayload<S['select'][P]>>  :
        P extends 'Meeting_Meeting_company_idToUser' ? Array < MeetingGetPayload<S['select'][P]>>  :
        P extends 'Meeting_Meeting_seeker_idToUser' ? Array < MeetingGetPayload<S['select'][P]>>  :
        P extends 'Notification' ? Array < NotificationGetPayload<S['select'][P]>>  :
        P extends 'Skill' ? Array < SkillGetPayload<S['select'][P]>>  :
        P extends 'Work_Experience' ? Array < Work_ExperienceGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Application<T extends User$ApplicationArgs= {}>(args?: Subset<T, User$ApplicationArgs>): PrismaPromise<Array<ApplicationGetPayload<T>>| Null>;

    Education<T extends User$EducationArgs= {}>(args?: Subset<T, User$EducationArgs>): PrismaPromise<Array<EducationGetPayload<T>>| Null>;

    Job<T extends User$JobArgs= {}>(args?: Subset<T, User$JobArgs>): PrismaPromise<Array<JobGetPayload<T>>| Null>;

    Meeting_Meeting_company_idToUser<T extends User$Meeting_Meeting_company_idToUserArgs= {}>(args?: Subset<T, User$Meeting_Meeting_company_idToUserArgs>): PrismaPromise<Array<MeetingGetPayload<T>>| Null>;

    Meeting_Meeting_seeker_idToUser<T extends User$Meeting_Meeting_seeker_idToUserArgs= {}>(args?: Subset<T, User$Meeting_Meeting_seeker_idToUserArgs>): PrismaPromise<Array<MeetingGetPayload<T>>| Null>;

    Notification<T extends User$NotificationArgs= {}>(args?: Subset<T, User$NotificationArgs>): PrismaPromise<Array<NotificationGetPayload<T>>| Null>;

    Skill<T extends User$SkillArgs= {}>(args?: Subset<T, User$SkillArgs>): PrismaPromise<Array<SkillGetPayload<T>>| Null>;

    Work_Experience<T extends User$Work_ExperienceArgs= {}>(args?: Subset<T, User$Work_ExperienceArgs>): PrismaPromise<Array<Work_ExperienceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Application
   */
  export type User$ApplicationArgs = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude | null
    where?: ApplicationWhereInput
    orderBy?: Enumerable<ApplicationOrderByWithRelationInput>
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ApplicationScalarFieldEnum>
  }


  /**
   * User.Education
   */
  export type User$EducationArgs = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude | null
    where?: EducationWhereInput
    orderBy?: Enumerable<EducationOrderByWithRelationInput>
    cursor?: EducationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EducationScalarFieldEnum>
  }


  /**
   * User.Job
   */
  export type User$JobArgs = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JobInclude | null
    where?: JobWhereInput
    orderBy?: Enumerable<JobOrderByWithRelationInput>
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<JobScalarFieldEnum>
  }


  /**
   * User.Meeting_Meeting_company_idToUser
   */
  export type User$Meeting_Meeting_company_idToUserArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    where?: MeetingWhereInput
    orderBy?: Enumerable<MeetingOrderByWithRelationInput>
    cursor?: MeetingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MeetingScalarFieldEnum>
  }


  /**
   * User.Meeting_Meeting_seeker_idToUser
   */
  export type User$Meeting_Meeting_seeker_idToUserArgs = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingInclude | null
    where?: MeetingWhereInput
    orderBy?: Enumerable<MeetingOrderByWithRelationInput>
    cursor?: MeetingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MeetingScalarFieldEnum>
  }


  /**
   * User.Notification
   */
  export type User$NotificationArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    where?: NotificationWhereInput
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * User.Skill
   */
  export type User$SkillArgs = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude | null
    where?: SkillWhereInput
    orderBy?: Enumerable<SkillOrderByWithRelationInput>
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SkillScalarFieldEnum>
  }


  /**
   * User.Work_Experience
   */
  export type User$Work_ExperienceArgs = {
    /**
     * Select specific fields to fetch from the Work_Experience
     */
    select?: Work_ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Work_ExperienceInclude | null
    where?: Work_ExperienceWhereInput
    orderBy?: Enumerable<Work_ExperienceOrderByWithRelationInput>
    cursor?: Work_ExperienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Work_ExperienceScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Work_Experience
   */


  export type AggregateWork_Experience = {
    _count: Work_ExperienceCountAggregateOutputType | null
    _avg: Work_ExperienceAvgAggregateOutputType | null
    _sum: Work_ExperienceSumAggregateOutputType | null
    _min: Work_ExperienceMinAggregateOutputType | null
    _max: Work_ExperienceMaxAggregateOutputType | null
  }

  export type Work_ExperienceAvgAggregateOutputType = {
    id: number | null
    seeker_id: number | null
  }

  export type Work_ExperienceSumAggregateOutputType = {
    id: number | null
    seeker_id: number | null
  }

  export type Work_ExperienceMinAggregateOutputType = {
    id: number | null
    seeker_id: number | null
    job_details: string | null
    company_name: string | null
    location: string | null
    start_date: Date | null
    end_date: Date | null
  }

  export type Work_ExperienceMaxAggregateOutputType = {
    id: number | null
    seeker_id: number | null
    job_details: string | null
    company_name: string | null
    location: string | null
    start_date: Date | null
    end_date: Date | null
  }

  export type Work_ExperienceCountAggregateOutputType = {
    id: number
    seeker_id: number
    job_details: number
    company_name: number
    location: number
    start_date: number
    end_date: number
    _all: number
  }


  export type Work_ExperienceAvgAggregateInputType = {
    id?: true
    seeker_id?: true
  }

  export type Work_ExperienceSumAggregateInputType = {
    id?: true
    seeker_id?: true
  }

  export type Work_ExperienceMinAggregateInputType = {
    id?: true
    seeker_id?: true
    job_details?: true
    company_name?: true
    location?: true
    start_date?: true
    end_date?: true
  }

  export type Work_ExperienceMaxAggregateInputType = {
    id?: true
    seeker_id?: true
    job_details?: true
    company_name?: true
    location?: true
    start_date?: true
    end_date?: true
  }

  export type Work_ExperienceCountAggregateInputType = {
    id?: true
    seeker_id?: true
    job_details?: true
    company_name?: true
    location?: true
    start_date?: true
    end_date?: true
    _all?: true
  }

  export type Work_ExperienceAggregateArgs = {
    /**
     * Filter which Work_Experience to aggregate.
     */
    where?: Work_ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Work_Experiences to fetch.
     */
    orderBy?: Enumerable<Work_ExperienceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Work_ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Work_Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Work_Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Work_Experiences
    **/
    _count?: true | Work_ExperienceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Work_ExperienceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Work_ExperienceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Work_ExperienceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Work_ExperienceMaxAggregateInputType
  }

  export type GetWork_ExperienceAggregateType<T extends Work_ExperienceAggregateArgs> = {
        [P in keyof T & keyof AggregateWork_Experience]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWork_Experience[P]>
      : GetScalarType<T[P], AggregateWork_Experience[P]>
  }




  export type Work_ExperienceGroupByArgs = {
    where?: Work_ExperienceWhereInput
    orderBy?: Enumerable<Work_ExperienceOrderByWithAggregationInput>
    by: Work_ExperienceScalarFieldEnum[]
    having?: Work_ExperienceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Work_ExperienceCountAggregateInputType | true
    _avg?: Work_ExperienceAvgAggregateInputType
    _sum?: Work_ExperienceSumAggregateInputType
    _min?: Work_ExperienceMinAggregateInputType
    _max?: Work_ExperienceMaxAggregateInputType
  }


  export type Work_ExperienceGroupByOutputType = {
    id: number
    seeker_id: number | null
    job_details: string | null
    company_name: string | null
    location: string | null
    start_date: Date | null
    end_date: Date | null
    _count: Work_ExperienceCountAggregateOutputType | null
    _avg: Work_ExperienceAvgAggregateOutputType | null
    _sum: Work_ExperienceSumAggregateOutputType | null
    _min: Work_ExperienceMinAggregateOutputType | null
    _max: Work_ExperienceMaxAggregateOutputType | null
  }

  type GetWork_ExperienceGroupByPayload<T extends Work_ExperienceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Work_ExperienceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Work_ExperienceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Work_ExperienceGroupByOutputType[P]>
            : GetScalarType<T[P], Work_ExperienceGroupByOutputType[P]>
        }
      >
    >


  export type Work_ExperienceSelect = {
    id?: boolean
    seeker_id?: boolean
    job_details?: boolean
    company_name?: boolean
    location?: boolean
    start_date?: boolean
    end_date?: boolean
    User?: boolean | UserArgs
  }


  export type Work_ExperienceInclude = {
    User?: boolean | UserArgs
  }

  export type Work_ExperienceGetPayload<S extends boolean | null | undefined | Work_ExperienceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Work_Experience :
    S extends undefined ? never :
    S extends { include: any } & (Work_ExperienceArgs | Work_ExperienceFindManyArgs)
    ? Work_Experience  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (Work_ExperienceArgs | Work_ExperienceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Work_Experience ? Work_Experience[P] : never
  } 
      : Work_Experience


  type Work_ExperienceCountArgs = 
    Omit<Work_ExperienceFindManyArgs, 'select' | 'include'> & {
      select?: Work_ExperienceCountAggregateInputType | true
    }

  export interface Work_ExperienceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Work_Experience that matches the filter.
     * @param {Work_ExperienceFindUniqueArgs} args - Arguments to find a Work_Experience
     * @example
     * // Get one Work_Experience
     * const work_Experience = await prisma.work_Experience.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Work_ExperienceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Work_ExperienceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Work_Experience'> extends True ? Prisma__Work_ExperienceClient<Work_ExperienceGetPayload<T>> : Prisma__Work_ExperienceClient<Work_ExperienceGetPayload<T> | null, null>

    /**
     * Find one Work_Experience that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Work_ExperienceFindUniqueOrThrowArgs} args - Arguments to find a Work_Experience
     * @example
     * // Get one Work_Experience
     * const work_Experience = await prisma.work_Experience.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Work_ExperienceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Work_ExperienceFindUniqueOrThrowArgs>
    ): Prisma__Work_ExperienceClient<Work_ExperienceGetPayload<T>>

    /**
     * Find the first Work_Experience that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Work_ExperienceFindFirstArgs} args - Arguments to find a Work_Experience
     * @example
     * // Get one Work_Experience
     * const work_Experience = await prisma.work_Experience.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Work_ExperienceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Work_ExperienceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Work_Experience'> extends True ? Prisma__Work_ExperienceClient<Work_ExperienceGetPayload<T>> : Prisma__Work_ExperienceClient<Work_ExperienceGetPayload<T> | null, null>

    /**
     * Find the first Work_Experience that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Work_ExperienceFindFirstOrThrowArgs} args - Arguments to find a Work_Experience
     * @example
     * // Get one Work_Experience
     * const work_Experience = await prisma.work_Experience.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Work_ExperienceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Work_ExperienceFindFirstOrThrowArgs>
    ): Prisma__Work_ExperienceClient<Work_ExperienceGetPayload<T>>

    /**
     * Find zero or more Work_Experiences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Work_ExperienceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Work_Experiences
     * const work_Experiences = await prisma.work_Experience.findMany()
     * 
     * // Get first 10 Work_Experiences
     * const work_Experiences = await prisma.work_Experience.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const work_ExperienceWithIdOnly = await prisma.work_Experience.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Work_ExperienceFindManyArgs>(
      args?: SelectSubset<T, Work_ExperienceFindManyArgs>
    ): PrismaPromise<Array<Work_ExperienceGetPayload<T>>>

    /**
     * Create a Work_Experience.
     * @param {Work_ExperienceCreateArgs} args - Arguments to create a Work_Experience.
     * @example
     * // Create one Work_Experience
     * const Work_Experience = await prisma.work_Experience.create({
     *   data: {
     *     // ... data to create a Work_Experience
     *   }
     * })
     * 
    **/
    create<T extends Work_ExperienceCreateArgs>(
      args: SelectSubset<T, Work_ExperienceCreateArgs>
    ): Prisma__Work_ExperienceClient<Work_ExperienceGetPayload<T>>

    /**
     * Create many Work_Experiences.
     *     @param {Work_ExperienceCreateManyArgs} args - Arguments to create many Work_Experiences.
     *     @example
     *     // Create many Work_Experiences
     *     const work_Experience = await prisma.work_Experience.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Work_ExperienceCreateManyArgs>(
      args?: SelectSubset<T, Work_ExperienceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Work_Experience.
     * @param {Work_ExperienceDeleteArgs} args - Arguments to delete one Work_Experience.
     * @example
     * // Delete one Work_Experience
     * const Work_Experience = await prisma.work_Experience.delete({
     *   where: {
     *     // ... filter to delete one Work_Experience
     *   }
     * })
     * 
    **/
    delete<T extends Work_ExperienceDeleteArgs>(
      args: SelectSubset<T, Work_ExperienceDeleteArgs>
    ): Prisma__Work_ExperienceClient<Work_ExperienceGetPayload<T>>

    /**
     * Update one Work_Experience.
     * @param {Work_ExperienceUpdateArgs} args - Arguments to update one Work_Experience.
     * @example
     * // Update one Work_Experience
     * const work_Experience = await prisma.work_Experience.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Work_ExperienceUpdateArgs>(
      args: SelectSubset<T, Work_ExperienceUpdateArgs>
    ): Prisma__Work_ExperienceClient<Work_ExperienceGetPayload<T>>

    /**
     * Delete zero or more Work_Experiences.
     * @param {Work_ExperienceDeleteManyArgs} args - Arguments to filter Work_Experiences to delete.
     * @example
     * // Delete a few Work_Experiences
     * const { count } = await prisma.work_Experience.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Work_ExperienceDeleteManyArgs>(
      args?: SelectSubset<T, Work_ExperienceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Work_Experiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Work_ExperienceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Work_Experiences
     * const work_Experience = await prisma.work_Experience.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Work_ExperienceUpdateManyArgs>(
      args: SelectSubset<T, Work_ExperienceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Work_Experience.
     * @param {Work_ExperienceUpsertArgs} args - Arguments to update or create a Work_Experience.
     * @example
     * // Update or create a Work_Experience
     * const work_Experience = await prisma.work_Experience.upsert({
     *   create: {
     *     // ... data to create a Work_Experience
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Work_Experience we want to update
     *   }
     * })
    **/
    upsert<T extends Work_ExperienceUpsertArgs>(
      args: SelectSubset<T, Work_ExperienceUpsertArgs>
    ): Prisma__Work_ExperienceClient<Work_ExperienceGetPayload<T>>

    /**
     * Count the number of Work_Experiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Work_ExperienceCountArgs} args - Arguments to filter Work_Experiences to count.
     * @example
     * // Count the number of Work_Experiences
     * const count = await prisma.work_Experience.count({
     *   where: {
     *     // ... the filter for the Work_Experiences we want to count
     *   }
     * })
    **/
    count<T extends Work_ExperienceCountArgs>(
      args?: Subset<T, Work_ExperienceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Work_ExperienceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Work_Experience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Work_ExperienceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Work_ExperienceAggregateArgs>(args: Subset<T, Work_ExperienceAggregateArgs>): PrismaPromise<GetWork_ExperienceAggregateType<T>>

    /**
     * Group by Work_Experience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Work_ExperienceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Work_ExperienceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Work_ExperienceGroupByArgs['orderBy'] }
        : { orderBy?: Work_ExperienceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Work_ExperienceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWork_ExperienceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Work_Experience.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Work_ExperienceClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Work_Experience base type for findUnique actions
   */
  export type Work_ExperienceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Work_Experience
     */
    select?: Work_ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Work_ExperienceInclude | null
    /**
     * Filter, which Work_Experience to fetch.
     */
    where: Work_ExperienceWhereUniqueInput
  }

  /**
   * Work_Experience findUnique
   */
  export interface Work_ExperienceFindUniqueArgs extends Work_ExperienceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Work_Experience findUniqueOrThrow
   */
  export type Work_ExperienceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Work_Experience
     */
    select?: Work_ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Work_ExperienceInclude | null
    /**
     * Filter, which Work_Experience to fetch.
     */
    where: Work_ExperienceWhereUniqueInput
  }


  /**
   * Work_Experience base type for findFirst actions
   */
  export type Work_ExperienceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Work_Experience
     */
    select?: Work_ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Work_ExperienceInclude | null
    /**
     * Filter, which Work_Experience to fetch.
     */
    where?: Work_ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Work_Experiences to fetch.
     */
    orderBy?: Enumerable<Work_ExperienceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Work_Experiences.
     */
    cursor?: Work_ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Work_Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Work_Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Work_Experiences.
     */
    distinct?: Enumerable<Work_ExperienceScalarFieldEnum>
  }

  /**
   * Work_Experience findFirst
   */
  export interface Work_ExperienceFindFirstArgs extends Work_ExperienceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Work_Experience findFirstOrThrow
   */
  export type Work_ExperienceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Work_Experience
     */
    select?: Work_ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Work_ExperienceInclude | null
    /**
     * Filter, which Work_Experience to fetch.
     */
    where?: Work_ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Work_Experiences to fetch.
     */
    orderBy?: Enumerable<Work_ExperienceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Work_Experiences.
     */
    cursor?: Work_ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Work_Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Work_Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Work_Experiences.
     */
    distinct?: Enumerable<Work_ExperienceScalarFieldEnum>
  }


  /**
   * Work_Experience findMany
   */
  export type Work_ExperienceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Work_Experience
     */
    select?: Work_ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Work_ExperienceInclude | null
    /**
     * Filter, which Work_Experiences to fetch.
     */
    where?: Work_ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Work_Experiences to fetch.
     */
    orderBy?: Enumerable<Work_ExperienceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Work_Experiences.
     */
    cursor?: Work_ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Work_Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Work_Experiences.
     */
    skip?: number
    distinct?: Enumerable<Work_ExperienceScalarFieldEnum>
  }


  /**
   * Work_Experience create
   */
  export type Work_ExperienceCreateArgs = {
    /**
     * Select specific fields to fetch from the Work_Experience
     */
    select?: Work_ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Work_ExperienceInclude | null
    /**
     * The data needed to create a Work_Experience.
     */
    data: XOR<Work_ExperienceCreateInput, Work_ExperienceUncheckedCreateInput>
  }


  /**
   * Work_Experience createMany
   */
  export type Work_ExperienceCreateManyArgs = {
    /**
     * The data used to create many Work_Experiences.
     */
    data: Enumerable<Work_ExperienceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Work_Experience update
   */
  export type Work_ExperienceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Work_Experience
     */
    select?: Work_ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Work_ExperienceInclude | null
    /**
     * The data needed to update a Work_Experience.
     */
    data: XOR<Work_ExperienceUpdateInput, Work_ExperienceUncheckedUpdateInput>
    /**
     * Choose, which Work_Experience to update.
     */
    where: Work_ExperienceWhereUniqueInput
  }


  /**
   * Work_Experience updateMany
   */
  export type Work_ExperienceUpdateManyArgs = {
    /**
     * The data used to update Work_Experiences.
     */
    data: XOR<Work_ExperienceUpdateManyMutationInput, Work_ExperienceUncheckedUpdateManyInput>
    /**
     * Filter which Work_Experiences to update
     */
    where?: Work_ExperienceWhereInput
  }


  /**
   * Work_Experience upsert
   */
  export type Work_ExperienceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Work_Experience
     */
    select?: Work_ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Work_ExperienceInclude | null
    /**
     * The filter to search for the Work_Experience to update in case it exists.
     */
    where: Work_ExperienceWhereUniqueInput
    /**
     * In case the Work_Experience found by the `where` argument doesn't exist, create a new Work_Experience with this data.
     */
    create: XOR<Work_ExperienceCreateInput, Work_ExperienceUncheckedCreateInput>
    /**
     * In case the Work_Experience was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Work_ExperienceUpdateInput, Work_ExperienceUncheckedUpdateInput>
  }


  /**
   * Work_Experience delete
   */
  export type Work_ExperienceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Work_Experience
     */
    select?: Work_ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Work_ExperienceInclude | null
    /**
     * Filter which Work_Experience to delete.
     */
    where: Work_ExperienceWhereUniqueInput
  }


  /**
   * Work_Experience deleteMany
   */
  export type Work_ExperienceDeleteManyArgs = {
    /**
     * Filter which Work_Experiences to delete
     */
    where?: Work_ExperienceWhereInput
  }


  /**
   * Work_Experience without action
   */
  export type Work_ExperienceArgs = {
    /**
     * Select specific fields to fetch from the Work_Experience
     */
    select?: Work_ExperienceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Work_ExperienceInclude | null
  }



  /**
   * Model Notification
   */


  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    type: string | null
    details: string | null
    read: boolean | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    type: string | null
    details: string | null
    read: boolean | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    user_id: number
    type: number
    details: number
    read: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    details?: true
    read?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    details?: true
    read?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    user_id?: true
    type?: true
    details?: true
    read?: true
    _all?: true
  }

  export type NotificationAggregateArgs = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs = {
    where?: NotificationWhereInput
    orderBy?: Enumerable<NotificationOrderByWithAggregationInput>
    by: NotificationScalarFieldEnum[]
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }


  export type NotificationGroupByOutputType = {
    id: number
    user_id: number | null
    type: string | null
    details: string | null
    read: boolean | null
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect = {
    id?: boolean
    user_id?: boolean
    type?: boolean
    details?: boolean
    read?: boolean
    User?: boolean | UserArgs
  }


  export type NotificationInclude = {
    User?: boolean | UserArgs
  }

  export type NotificationGetPayload<S extends boolean | null | undefined | NotificationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Notification :
    S extends undefined ? never :
    S extends { include: any } & (NotificationArgs | NotificationFindManyArgs)
    ? Notification  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (NotificationArgs | NotificationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Notification ? Notification[P] : never
  } 
      : Notification


  type NotificationCountArgs = 
    Omit<NotificationFindManyArgs, 'select' | 'include'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NotificationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Notification'> extends True ? Prisma__NotificationClient<NotificationGetPayload<T>> : Prisma__NotificationClient<NotificationGetPayload<T> | null, null>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NotificationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Notification'> extends True ? Prisma__NotificationClient<NotificationGetPayload<T>> : Prisma__NotificationClient<NotificationGetPayload<T> | null, null>

    /**
     * Find the first Notification that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs>(
      args?: SelectSubset<T, NotificationFindManyArgs>
    ): PrismaPromise<Array<NotificationGetPayload<T>>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs>(
      args: SelectSubset<T, NotificationCreateArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs>(
      args?: SelectSubset<T, NotificationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs>(
      args: SelectSubset<T, NotificationDeleteArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs>(
      args: SelectSubset<T, NotificationUpdateArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs>(
      args?: SelectSubset<T, NotificationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs>(
      args: SelectSubset<T, NotificationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs>(
      args: SelectSubset<T, NotificationUpsertArgs>
    ): Prisma__NotificationClient<NotificationGetPayload<T>>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NotificationClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Notification base type for findUnique actions
   */
  export type NotificationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUnique
   */
  export interface NotificationFindUniqueArgs extends NotificationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification base type for findFirst actions
   */
  export type NotificationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }

  /**
   * Notification findFirst
   */
  export interface NotificationFindFirstArgs extends NotificationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: Enumerable<NotificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: Enumerable<NotificationScalarFieldEnum>
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs = {
    /**
     * The data used to create many Notifications.
     */
    data: Enumerable<NotificationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationArgs = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ApplicationScalarFieldEnum: {
    id: 'id',
    job_id: 'job_id',
    seeker_id: 'seeker_id',
    seeker_notes: 'seeker_notes',
    company_notes: 'company_notes',
    seeker_interest_level: 'seeker_interest_level',
    company_interest_level: 'company_interest_level'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const EducationScalarFieldEnum: {
    id: 'id',
    seeker_id: 'seeker_id',
    school: 'school',
    location: 'location',
    degree: 'degree',
    major: 'major',
    graduate: 'graduate',
    graduation_date: 'graduation_date'
  };

  export type EducationScalarFieldEnum = (typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    name: 'name',
    company_id: 'company_id',
    description: 'description',
    salary: 'salary',
    location: 'location',
    close_date: 'close_date',
    experience_type: 'experience_type',
    employment_type: 'employment_type',
    jobsite: 'jobsite'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const MeetingScalarFieldEnum: {
    id: 'id',
    seeker_id: 'seeker_id',
    company_id: 'company_id',
    start_time: 'start_time',
    end_time: 'end_time',
    description: 'description',
    application_id: 'application_id',
    canceled: 'canceled',
    seeker_accepted: 'seeker_accepted',
    private: 'private',
    title: 'title'
  };

  export type MeetingScalarFieldEnum = (typeof MeetingScalarFieldEnum)[keyof typeof MeetingScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    type: 'type',
    details: 'details',
    read: 'read'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SkillScalarFieldEnum: {
    id: 'id',
    job_id: 'job_id',
    seeker_id: 'seeker_id',
    skill: 'skill'
  };

  export type SkillScalarFieldEnum = (typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    password: 'password',
    company_name: 'company_name',
    role: 'role',
    image_url: 'image_url',
    address: 'address',
    address_2: 'address_2',
    city: 'city',
    state: 'state',
    zip_code: 'zip_code'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const Work_ExperienceScalarFieldEnum: {
    id: 'id',
    seeker_id: 'seeker_id',
    job_details: 'job_details',
    company_name: 'company_name',
    location: 'location',
    start_date: 'start_date',
    end_date: 'end_date'
  };

  export type Work_ExperienceScalarFieldEnum = (typeof Work_ExperienceScalarFieldEnum)[keyof typeof Work_ExperienceScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type ApplicationWhereInput = {
    AND?: Enumerable<ApplicationWhereInput>
    OR?: Enumerable<ApplicationWhereInput>
    NOT?: Enumerable<ApplicationWhereInput>
    id?: IntFilter | number
    job_id?: IntNullableFilter | number | null
    seeker_id?: IntNullableFilter | number | null
    seeker_notes?: StringNullableFilter | string | null
    company_notes?: StringNullableFilter | string | null
    seeker_interest_level?: StringNullableFilter | string | null
    company_interest_level?: StringNullableFilter | string | null
    Job?: XOR<JobRelationFilter, JobWhereInput> | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
    Meeting?: MeetingListRelationFilter
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
    seeker_notes?: SortOrder
    company_notes?: SortOrder
    seeker_interest_level?: SortOrder
    company_interest_level?: SortOrder
    Job?: JobOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
    Meeting?: MeetingOrderByRelationAggregateInput
  }

  export type ApplicationWhereUniqueInput = {
    id?: number
  }

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
    seeker_notes?: SortOrder
    company_notes?: SortOrder
    seeker_interest_level?: SortOrder
    company_interest_level?: SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _avg?: ApplicationAvgOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
    _sum?: ApplicationSumOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ApplicationScalarWhereWithAggregatesInput>
    OR?: Enumerable<ApplicationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ApplicationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    job_id?: IntNullableWithAggregatesFilter | number | null
    seeker_id?: IntNullableWithAggregatesFilter | number | null
    seeker_notes?: StringNullableWithAggregatesFilter | string | null
    company_notes?: StringNullableWithAggregatesFilter | string | null
    seeker_interest_level?: StringNullableWithAggregatesFilter | string | null
    company_interest_level?: StringNullableWithAggregatesFilter | string | null
  }

  export type EducationWhereInput = {
    AND?: Enumerable<EducationWhereInput>
    OR?: Enumerable<EducationWhereInput>
    NOT?: Enumerable<EducationWhereInput>
    id?: IntFilter | number
    seeker_id?: IntNullableFilter | number | null
    school?: StringNullableFilter | string | null
    location?: StringNullableFilter | string | null
    degree?: StringNullableFilter | string | null
    major?: StringNullableFilter | string | null
    graduate?: BoolNullableFilter | boolean | null
    graduation_date?: DateTimeNullableFilter | Date | string | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type EducationOrderByWithRelationInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    school?: SortOrder
    location?: SortOrder
    degree?: SortOrder
    major?: SortOrder
    graduate?: SortOrder
    graduation_date?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type EducationWhereUniqueInput = {
    id?: number
  }

  export type EducationOrderByWithAggregationInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    school?: SortOrder
    location?: SortOrder
    degree?: SortOrder
    major?: SortOrder
    graduate?: SortOrder
    graduation_date?: SortOrder
    _count?: EducationCountOrderByAggregateInput
    _avg?: EducationAvgOrderByAggregateInput
    _max?: EducationMaxOrderByAggregateInput
    _min?: EducationMinOrderByAggregateInput
    _sum?: EducationSumOrderByAggregateInput
  }

  export type EducationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EducationScalarWhereWithAggregatesInput>
    OR?: Enumerable<EducationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EducationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    seeker_id?: IntNullableWithAggregatesFilter | number | null
    school?: StringNullableWithAggregatesFilter | string | null
    location?: StringNullableWithAggregatesFilter | string | null
    degree?: StringNullableWithAggregatesFilter | string | null
    major?: StringNullableWithAggregatesFilter | string | null
    graduate?: BoolNullableWithAggregatesFilter | boolean | null
    graduation_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type JobWhereInput = {
    AND?: Enumerable<JobWhereInput>
    OR?: Enumerable<JobWhereInput>
    NOT?: Enumerable<JobWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    company_id?: IntNullableFilter | number | null
    description?: StringNullableFilter | string | null
    salary?: IntNullableFilter | number | null
    location?: StringNullableFilter | string | null
    close_date?: DateTimeNullableFilter | Date | string | null
    experience_type?: StringNullableFilter | string | null
    employment_type?: StringNullableFilter | string | null
    jobsite?: StringNullableFilter | string | null
    Application?: ApplicationListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput> | null
    Skill?: SkillListRelationFilter
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    company_id?: SortOrder
    description?: SortOrder
    salary?: SortOrder
    location?: SortOrder
    close_date?: SortOrder
    experience_type?: SortOrder
    employment_type?: SortOrder
    jobsite?: SortOrder
    Application?: ApplicationOrderByRelationAggregateInput
    User?: UserOrderByWithRelationInput
    Skill?: SkillOrderByRelationAggregateInput
  }

  export type JobWhereUniqueInput = {
    id?: number
  }

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    company_id?: SortOrder
    description?: SortOrder
    salary?: SortOrder
    location?: SortOrder
    close_date?: SortOrder
    experience_type?: SortOrder
    employment_type?: SortOrder
    jobsite?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: Enumerable<JobScalarWhereWithAggregatesInput>
    OR?: Enumerable<JobScalarWhereWithAggregatesInput>
    NOT?: Enumerable<JobScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    company_id?: IntNullableWithAggregatesFilter | number | null
    description?: StringNullableWithAggregatesFilter | string | null
    salary?: IntNullableWithAggregatesFilter | number | null
    location?: StringNullableWithAggregatesFilter | string | null
    close_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    experience_type?: StringNullableWithAggregatesFilter | string | null
    employment_type?: StringNullableWithAggregatesFilter | string | null
    jobsite?: StringNullableWithAggregatesFilter | string | null
  }

  export type MeetingWhereInput = {
    AND?: Enumerable<MeetingWhereInput>
    OR?: Enumerable<MeetingWhereInput>
    NOT?: Enumerable<MeetingWhereInput>
    id?: IntFilter | number
    seeker_id?: IntNullableFilter | number | null
    company_id?: IntNullableFilter | number | null
    start_time?: DateTimeNullableFilter | Date | string | null
    end_time?: DateTimeNullableFilter | Date | string | null
    description?: StringNullableFilter | string | null
    application_id?: IntNullableFilter | number | null
    canceled?: BoolNullableFilter | boolean | null
    seeker_accepted?: BoolNullableFilter | boolean | null
    private?: BoolNullableFilter | boolean | null
    title?: StringNullableFilter | string | null
    Application?: XOR<ApplicationRelationFilter, ApplicationWhereInput> | null
    User_Meeting_company_idToUser?: XOR<UserRelationFilter, UserWhereInput> | null
    User_Meeting_seeker_idToUser?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type MeetingOrderByWithRelationInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    company_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    description?: SortOrder
    application_id?: SortOrder
    canceled?: SortOrder
    seeker_accepted?: SortOrder
    private?: SortOrder
    title?: SortOrder
    Application?: ApplicationOrderByWithRelationInput
    User_Meeting_company_idToUser?: UserOrderByWithRelationInput
    User_Meeting_seeker_idToUser?: UserOrderByWithRelationInput
  }

  export type MeetingWhereUniqueInput = {
    id?: number
  }

  export type MeetingOrderByWithAggregationInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    company_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    description?: SortOrder
    application_id?: SortOrder
    canceled?: SortOrder
    seeker_accepted?: SortOrder
    private?: SortOrder
    title?: SortOrder
    _count?: MeetingCountOrderByAggregateInput
    _avg?: MeetingAvgOrderByAggregateInput
    _max?: MeetingMaxOrderByAggregateInput
    _min?: MeetingMinOrderByAggregateInput
    _sum?: MeetingSumOrderByAggregateInput
  }

  export type MeetingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MeetingScalarWhereWithAggregatesInput>
    OR?: Enumerable<MeetingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MeetingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    seeker_id?: IntNullableWithAggregatesFilter | number | null
    company_id?: IntNullableWithAggregatesFilter | number | null
    start_time?: DateTimeNullableWithAggregatesFilter | Date | string | null
    end_time?: DateTimeNullableWithAggregatesFilter | Date | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    application_id?: IntNullableWithAggregatesFilter | number | null
    canceled?: BoolNullableWithAggregatesFilter | boolean | null
    seeker_accepted?: BoolNullableWithAggregatesFilter | boolean | null
    private?: BoolNullableWithAggregatesFilter | boolean | null
    title?: StringNullableWithAggregatesFilter | string | null
  }

  export type SkillWhereInput = {
    AND?: Enumerable<SkillWhereInput>
    OR?: Enumerable<SkillWhereInput>
    NOT?: Enumerable<SkillWhereInput>
    id?: IntFilter | number
    job_id?: IntNullableFilter | number | null
    seeker_id?: IntNullableFilter | number | null
    skill?: StringNullableFilter | string | null
    Job?: XOR<JobRelationFilter, JobWhereInput> | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type SkillOrderByWithRelationInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
    skill?: SortOrder
    Job?: JobOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type SkillWhereUniqueInput = {
    id?: number
  }

  export type SkillOrderByWithAggregationInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
    skill?: SortOrder
    _count?: SkillCountOrderByAggregateInput
    _avg?: SkillAvgOrderByAggregateInput
    _max?: SkillMaxOrderByAggregateInput
    _min?: SkillMinOrderByAggregateInput
    _sum?: SkillSumOrderByAggregateInput
  }

  export type SkillScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SkillScalarWhereWithAggregatesInput>
    OR?: Enumerable<SkillScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SkillScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    job_id?: IntNullableWithAggregatesFilter | number | null
    seeker_id?: IntNullableWithAggregatesFilter | number | null
    skill?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    first_name?: StringNullableFilter | string | null
    last_name?: StringNullableFilter | string | null
    email?: StringFilter | string
    password?: StringFilter | string
    company_name?: StringNullableFilter | string | null
    role?: StringNullableFilter | string | null
    image_url?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    address_2?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    state?: StringNullableFilter | string | null
    zip_code?: StringNullableFilter | string | null
    Application?: ApplicationListRelationFilter
    Education?: EducationListRelationFilter
    Job?: JobListRelationFilter
    Meeting_Meeting_company_idToUser?: MeetingListRelationFilter
    Meeting_Meeting_seeker_idToUser?: MeetingListRelationFilter
    Notification?: NotificationListRelationFilter
    Skill?: SkillListRelationFilter
    Work_Experience?: Work_ExperienceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    company_name?: SortOrder
    role?: SortOrder
    image_url?: SortOrder
    address?: SortOrder
    address_2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip_code?: SortOrder
    Application?: ApplicationOrderByRelationAggregateInput
    Education?: EducationOrderByRelationAggregateInput
    Job?: JobOrderByRelationAggregateInput
    Meeting_Meeting_company_idToUser?: MeetingOrderByRelationAggregateInput
    Meeting_Meeting_seeker_idToUser?: MeetingOrderByRelationAggregateInput
    Notification?: NotificationOrderByRelationAggregateInput
    Skill?: SkillOrderByRelationAggregateInput
    Work_Experience?: Work_ExperienceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    password?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    company_name?: SortOrder
    role?: SortOrder
    image_url?: SortOrder
    address?: SortOrder
    address_2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip_code?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    first_name?: StringNullableWithAggregatesFilter | string | null
    last_name?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    company_name?: StringNullableWithAggregatesFilter | string | null
    role?: StringNullableWithAggregatesFilter | string | null
    image_url?: StringNullableWithAggregatesFilter | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    address_2?: StringNullableWithAggregatesFilter | string | null
    city?: StringNullableWithAggregatesFilter | string | null
    state?: StringNullableWithAggregatesFilter | string | null
    zip_code?: StringNullableWithAggregatesFilter | string | null
  }

  export type Work_ExperienceWhereInput = {
    AND?: Enumerable<Work_ExperienceWhereInput>
    OR?: Enumerable<Work_ExperienceWhereInput>
    NOT?: Enumerable<Work_ExperienceWhereInput>
    id?: IntFilter | number
    seeker_id?: IntNullableFilter | number | null
    job_details?: StringNullableFilter | string | null
    company_name?: StringNullableFilter | string | null
    location?: StringNullableFilter | string | null
    start_date?: DateTimeNullableFilter | Date | string | null
    end_date?: DateTimeNullableFilter | Date | string | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type Work_ExperienceOrderByWithRelationInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    job_details?: SortOrder
    company_name?: SortOrder
    location?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type Work_ExperienceWhereUniqueInput = {
    id?: number
  }

  export type Work_ExperienceOrderByWithAggregationInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    job_details?: SortOrder
    company_name?: SortOrder
    location?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    _count?: Work_ExperienceCountOrderByAggregateInput
    _avg?: Work_ExperienceAvgOrderByAggregateInput
    _max?: Work_ExperienceMaxOrderByAggregateInput
    _min?: Work_ExperienceMinOrderByAggregateInput
    _sum?: Work_ExperienceSumOrderByAggregateInput
  }

  export type Work_ExperienceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Work_ExperienceScalarWhereWithAggregatesInput>
    OR?: Enumerable<Work_ExperienceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Work_ExperienceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    seeker_id?: IntNullableWithAggregatesFilter | number | null
    job_details?: StringNullableWithAggregatesFilter | string | null
    company_name?: StringNullableWithAggregatesFilter | string | null
    location?: StringNullableWithAggregatesFilter | string | null
    start_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    end_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type NotificationWhereInput = {
    AND?: Enumerable<NotificationWhereInput>
    OR?: Enumerable<NotificationWhereInput>
    NOT?: Enumerable<NotificationWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    type?: StringNullableFilter | string | null
    details?: StringNullableFilter | string | null
    read?: BoolNullableFilter | boolean | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    details?: SortOrder
    read?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = {
    id?: number
  }

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    details?: SortOrder
    read?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    OR?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NotificationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntNullableWithAggregatesFilter | number | null
    type?: StringNullableWithAggregatesFilter | string | null
    details?: StringNullableWithAggregatesFilter | string | null
    read?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type ApplicationCreateInput = {
    seeker_notes?: string | null
    company_notes?: string | null
    seeker_interest_level?: string | null
    company_interest_level?: string | null
    Job?: JobCreateNestedOneWithoutApplicationInput
    User?: UserCreateNestedOneWithoutApplicationInput
    Meeting?: MeetingCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: number
    job_id?: number | null
    seeker_id?: number | null
    seeker_notes?: string | null
    company_notes?: string | null
    seeker_interest_level?: string | null
    company_interest_level?: string | null
    Meeting?: MeetingUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUpdateInput = {
    seeker_notes?: NullableStringFieldUpdateOperationsInput | string | null
    company_notes?: NullableStringFieldUpdateOperationsInput | string | null
    seeker_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    company_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    Job?: JobUpdateOneWithoutApplicationNestedInput
    User?: UserUpdateOneWithoutApplicationNestedInput
    Meeting?: MeetingUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    job_id?: NullableIntFieldUpdateOperationsInput | number | null
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    seeker_notes?: NullableStringFieldUpdateOperationsInput | string | null
    company_notes?: NullableStringFieldUpdateOperationsInput | string | null
    seeker_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    company_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    Meeting?: MeetingUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyInput = {
    id?: number
    job_id?: number | null
    seeker_id?: number | null
    seeker_notes?: string | null
    company_notes?: string | null
    seeker_interest_level?: string | null
    company_interest_level?: string | null
  }

  export type ApplicationUpdateManyMutationInput = {
    seeker_notes?: NullableStringFieldUpdateOperationsInput | string | null
    company_notes?: NullableStringFieldUpdateOperationsInput | string | null
    seeker_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    company_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    job_id?: NullableIntFieldUpdateOperationsInput | number | null
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    seeker_notes?: NullableStringFieldUpdateOperationsInput | string | null
    company_notes?: NullableStringFieldUpdateOperationsInput | string | null
    seeker_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    company_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EducationCreateInput = {
    school?: string | null
    location?: string | null
    degree?: string | null
    major?: string | null
    graduate?: boolean | null
    graduation_date?: Date | string | null
    User?: UserCreateNestedOneWithoutEducationInput
  }

  export type EducationUncheckedCreateInput = {
    id?: number
    seeker_id?: number | null
    school?: string | null
    location?: string | null
    degree?: string | null
    major?: string | null
    graduate?: boolean | null
    graduation_date?: Date | string | null
  }

  export type EducationUpdateInput = {
    school?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    graduate?: NullableBoolFieldUpdateOperationsInput | boolean | null
    graduation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    graduate?: NullableBoolFieldUpdateOperationsInput | boolean | null
    graduation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EducationCreateManyInput = {
    id?: number
    seeker_id?: number | null
    school?: string | null
    location?: string | null
    degree?: string | null
    major?: string | null
    graduate?: boolean | null
    graduation_date?: Date | string | null
  }

  export type EducationUpdateManyMutationInput = {
    school?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    graduate?: NullableBoolFieldUpdateOperationsInput | boolean | null
    graduation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EducationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    school?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    graduate?: NullableBoolFieldUpdateOperationsInput | boolean | null
    graduation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JobCreateInput = {
    name?: string | null
    description?: string | null
    salary?: number | null
    location?: string | null
    close_date?: Date | string | null
    experience_type?: string | null
    employment_type?: string | null
    jobsite?: string | null
    Application?: ApplicationCreateNestedManyWithoutJobInput
    User?: UserCreateNestedOneWithoutJobInput
    Skill?: SkillCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: number
    name?: string | null
    company_id?: number | null
    description?: string | null
    salary?: number | null
    location?: string | null
    close_date?: Date | string | null
    experience_type?: string | null
    employment_type?: string | null
    jobsite?: string | null
    Application?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    Skill?: SkillUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    close_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience_type?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    jobsite?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateManyWithoutJobNestedInput
    User?: UserUpdateOneWithoutJobNestedInput
    Skill?: SkillUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    close_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience_type?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    jobsite?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    Skill?: SkillUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateManyInput = {
    id?: number
    name?: string | null
    company_id?: number | null
    description?: string | null
    salary?: number | null
    location?: string | null
    close_date?: Date | string | null
    experience_type?: string | null
    employment_type?: string | null
    jobsite?: string | null
  }

  export type JobUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    close_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience_type?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    jobsite?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    close_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience_type?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    jobsite?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MeetingCreateInput = {
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
    Application?: ApplicationCreateNestedOneWithoutMeetingInput
    User_Meeting_company_idToUser?: UserCreateNestedOneWithoutMeeting_Meeting_company_idToUserInput
    User_Meeting_seeker_idToUser?: UserCreateNestedOneWithoutMeeting_Meeting_seeker_idToUserInput
  }

  export type MeetingUncheckedCreateInput = {
    id?: number
    seeker_id?: number | null
    company_id?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    application_id?: number | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
  }

  export type MeetingUpdateInput = {
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateOneWithoutMeetingNestedInput
    User_Meeting_company_idToUser?: UserUpdateOneWithoutMeeting_Meeting_company_idToUserNestedInput
    User_Meeting_seeker_idToUser?: UserUpdateOneWithoutMeeting_Meeting_seeker_idToUserNestedInput
  }

  export type MeetingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    application_id?: NullableIntFieldUpdateOperationsInput | number | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MeetingCreateManyInput = {
    id?: number
    seeker_id?: number | null
    company_id?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    application_id?: number | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
  }

  export type MeetingUpdateManyMutationInput = {
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MeetingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    application_id?: NullableIntFieldUpdateOperationsInput | number | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SkillCreateInput = {
    skill?: string | null
    Job?: JobCreateNestedOneWithoutSkillInput
    User?: UserCreateNestedOneWithoutSkillInput
  }

  export type SkillUncheckedCreateInput = {
    id?: number
    job_id?: number | null
    seeker_id?: number | null
    skill?: string | null
  }

  export type SkillUpdateInput = {
    skill?: NullableStringFieldUpdateOperationsInput | string | null
    Job?: JobUpdateOneWithoutSkillNestedInput
    User?: UserUpdateOneWithoutSkillNestedInput
  }

  export type SkillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    job_id?: NullableIntFieldUpdateOperationsInput | number | null
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    skill?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SkillCreateManyInput = {
    id?: number
    job_id?: number | null
    seeker_id?: number | null
    skill?: string | null
  }

  export type SkillUpdateManyMutationInput = {
    skill?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SkillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    job_id?: NullableIntFieldUpdateOperationsInput | number | null
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    skill?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateInput = {
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationCreateNestedManyWithoutUserInput
    Education?: EducationCreateNestedManyWithoutUserInput
    Job?: JobCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationCreateNestedManyWithoutUserInput
    Skill?: SkillCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    Education?: EducationUncheckedCreateNestedManyWithoutUserInput
    Job?: JobUncheckedCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    Skill?: SkillUncheckedCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateManyWithoutUserNestedInput
    Education?: EducationUpdateManyWithoutUserNestedInput
    Job?: JobUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUpdateManyWithoutUserNestedInput
    Skill?: SkillUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    Education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    Job?: JobUncheckedUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    Skill?: SkillUncheckedUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
  }

  export type UserUpdateManyMutationInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Work_ExperienceCreateInput = {
    job_details?: string | null
    company_name?: string | null
    location?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
    User?: UserCreateNestedOneWithoutWork_ExperienceInput
  }

  export type Work_ExperienceUncheckedCreateInput = {
    id?: number
    seeker_id?: number | null
    job_details?: string | null
    company_name?: string | null
    location?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
  }

  export type Work_ExperienceUpdateInput = {
    job_details?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneWithoutWork_ExperienceNestedInput
  }

  export type Work_ExperienceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    job_details?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Work_ExperienceCreateManyInput = {
    id?: number
    seeker_id?: number | null
    job_details?: string | null
    company_name?: string | null
    location?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
  }

  export type Work_ExperienceUpdateManyMutationInput = {
    job_details?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Work_ExperienceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    job_details?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationCreateInput = {
    type?: string | null
    details?: string | null
    read?: boolean | null
    User?: UserCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    type?: string | null
    details?: string | null
    read?: boolean | null
  }

  export type NotificationUpdateInput = {
    type?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    read?: NullableBoolFieldUpdateOperationsInput | boolean | null
    User?: UserUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type NotificationCreateManyInput = {
    id?: number
    user_id?: number | null
    type?: string | null
    details?: string | null
    read?: boolean | null
  }

  export type NotificationUpdateManyMutationInput = {
    type?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type JobRelationFilter = {
    is?: JobWhereInput | null
    isNot?: JobWhereInput | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type MeetingListRelationFilter = {
    every?: MeetingWhereInput
    some?: MeetingWhereInput
    none?: MeetingWhereInput
  }

  export type MeetingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
    seeker_notes?: SortOrder
    company_notes?: SortOrder
    seeker_interest_level?: SortOrder
    company_interest_level?: SortOrder
  }

  export type ApplicationAvgOrderByAggregateInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
    seeker_notes?: SortOrder
    company_notes?: SortOrder
    seeker_interest_level?: SortOrder
    company_interest_level?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
    seeker_notes?: SortOrder
    company_notes?: SortOrder
    seeker_interest_level?: SortOrder
    company_interest_level?: SortOrder
  }

  export type ApplicationSumOrderByAggregateInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type EducationCountOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    school?: SortOrder
    location?: SortOrder
    degree?: SortOrder
    major?: SortOrder
    graduate?: SortOrder
    graduation_date?: SortOrder
  }

  export type EducationAvgOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
  }

  export type EducationMaxOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    school?: SortOrder
    location?: SortOrder
    degree?: SortOrder
    major?: SortOrder
    graduate?: SortOrder
    graduation_date?: SortOrder
  }

  export type EducationMinOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    school?: SortOrder
    location?: SortOrder
    degree?: SortOrder
    major?: SortOrder
    graduate?: SortOrder
    graduation_date?: SortOrder
  }

  export type EducationSumOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type SkillListRelationFilter = {
    every?: SkillWhereInput
    some?: SkillWhereInput
    none?: SkillWhereInput
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company_id?: SortOrder
    description?: SortOrder
    salary?: SortOrder
    location?: SortOrder
    close_date?: SortOrder
    experience_type?: SortOrder
    employment_type?: SortOrder
    jobsite?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    salary?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company_id?: SortOrder
    description?: SortOrder
    salary?: SortOrder
    location?: SortOrder
    close_date?: SortOrder
    experience_type?: SortOrder
    employment_type?: SortOrder
    jobsite?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company_id?: SortOrder
    description?: SortOrder
    salary?: SortOrder
    location?: SortOrder
    close_date?: SortOrder
    experience_type?: SortOrder
    employment_type?: SortOrder
    jobsite?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    salary?: SortOrder
  }

  export type ApplicationRelationFilter = {
    is?: ApplicationWhereInput | null
    isNot?: ApplicationWhereInput | null
  }

  export type MeetingCountOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    company_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    description?: SortOrder
    application_id?: SortOrder
    canceled?: SortOrder
    seeker_accepted?: SortOrder
    private?: SortOrder
    title?: SortOrder
  }

  export type MeetingAvgOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    company_id?: SortOrder
    application_id?: SortOrder
  }

  export type MeetingMaxOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    company_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    description?: SortOrder
    application_id?: SortOrder
    canceled?: SortOrder
    seeker_accepted?: SortOrder
    private?: SortOrder
    title?: SortOrder
  }

  export type MeetingMinOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    company_id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    description?: SortOrder
    application_id?: SortOrder
    canceled?: SortOrder
    seeker_accepted?: SortOrder
    private?: SortOrder
    title?: SortOrder
  }

  export type MeetingSumOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    company_id?: SortOrder
    application_id?: SortOrder
  }

  export type SkillCountOrderByAggregateInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
    skill?: SortOrder
  }

  export type SkillAvgOrderByAggregateInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
  }

  export type SkillMaxOrderByAggregateInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
    skill?: SortOrder
  }

  export type SkillMinOrderByAggregateInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
    skill?: SortOrder
  }

  export type SkillSumOrderByAggregateInput = {
    id?: SortOrder
    job_id?: SortOrder
    seeker_id?: SortOrder
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EducationListRelationFilter = {
    every?: EducationWhereInput
    some?: EducationWhereInput
    none?: EducationWhereInput
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type Work_ExperienceListRelationFilter = {
    every?: Work_ExperienceWhereInput
    some?: Work_ExperienceWhereInput
    none?: Work_ExperienceWhereInput
  }

  export type EducationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Work_ExperienceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    company_name?: SortOrder
    role?: SortOrder
    image_url?: SortOrder
    address?: SortOrder
    address_2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip_code?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    company_name?: SortOrder
    role?: SortOrder
    image_url?: SortOrder
    address?: SortOrder
    address_2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip_code?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    company_name?: SortOrder
    role?: SortOrder
    image_url?: SortOrder
    address?: SortOrder
    address_2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zip_code?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type Work_ExperienceCountOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    job_details?: SortOrder
    company_name?: SortOrder
    location?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type Work_ExperienceAvgOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
  }

  export type Work_ExperienceMaxOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    job_details?: SortOrder
    company_name?: SortOrder
    location?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type Work_ExperienceMinOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
    job_details?: SortOrder
    company_name?: SortOrder
    location?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type Work_ExperienceSumOrderByAggregateInput = {
    id?: SortOrder
    seeker_id?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    details?: SortOrder
    read?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    details?: SortOrder
    read?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    type?: SortOrder
    details?: SortOrder
    read?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type JobCreateNestedOneWithoutApplicationInput = {
    create?: XOR<JobCreateWithoutApplicationInput, JobUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationInput
    connect?: JobWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApplicationInput = {
    create?: XOR<UserCreateWithoutApplicationInput, UserUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicationInput
    connect?: UserWhereUniqueInput
  }

  export type MeetingCreateNestedManyWithoutApplicationInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutApplicationInput>, Enumerable<MeetingUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutApplicationInput>
    createMany?: MeetingCreateManyApplicationInputEnvelope
    connect?: Enumerable<MeetingWhereUniqueInput>
  }

  export type MeetingUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutApplicationInput>, Enumerable<MeetingUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutApplicationInput>
    createMany?: MeetingCreateManyApplicationInputEnvelope
    connect?: Enumerable<MeetingWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type JobUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<JobCreateWithoutApplicationInput, JobUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationInput
    upsert?: JobUpsertWithoutApplicationInput
    disconnect?: boolean
    delete?: boolean
    connect?: JobWhereUniqueInput
    update?: XOR<JobUpdateWithoutApplicationInput, JobUncheckedUpdateWithoutApplicationInput>
  }

  export type UserUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<UserCreateWithoutApplicationInput, UserUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicationInput
    upsert?: UserUpsertWithoutApplicationInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutApplicationInput, UserUncheckedUpdateWithoutApplicationInput>
  }

  export type MeetingUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutApplicationInput>, Enumerable<MeetingUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutApplicationInput>
    upsert?: Enumerable<MeetingUpsertWithWhereUniqueWithoutApplicationInput>
    createMany?: MeetingCreateManyApplicationInputEnvelope
    set?: Enumerable<MeetingWhereUniqueInput>
    disconnect?: Enumerable<MeetingWhereUniqueInput>
    delete?: Enumerable<MeetingWhereUniqueInput>
    connect?: Enumerable<MeetingWhereUniqueInput>
    update?: Enumerable<MeetingUpdateWithWhereUniqueWithoutApplicationInput>
    updateMany?: Enumerable<MeetingUpdateManyWithWhereWithoutApplicationInput>
    deleteMany?: Enumerable<MeetingScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MeetingUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutApplicationInput>, Enumerable<MeetingUncheckedCreateWithoutApplicationInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutApplicationInput>
    upsert?: Enumerable<MeetingUpsertWithWhereUniqueWithoutApplicationInput>
    createMany?: MeetingCreateManyApplicationInputEnvelope
    set?: Enumerable<MeetingWhereUniqueInput>
    disconnect?: Enumerable<MeetingWhereUniqueInput>
    delete?: Enumerable<MeetingWhereUniqueInput>
    connect?: Enumerable<MeetingWhereUniqueInput>
    update?: Enumerable<MeetingUpdateWithWhereUniqueWithoutApplicationInput>
    updateMany?: Enumerable<MeetingUpdateManyWithWhereWithoutApplicationInput>
    deleteMany?: Enumerable<MeetingScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutEducationInput = {
    create?: XOR<UserCreateWithoutEducationInput, UserUncheckedCreateWithoutEducationInput>
    connectOrCreate?: UserCreateOrConnectWithoutEducationInput
    connect?: UserWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneWithoutEducationNestedInput = {
    create?: XOR<UserCreateWithoutEducationInput, UserUncheckedCreateWithoutEducationInput>
    connectOrCreate?: UserCreateOrConnectWithoutEducationInput
    upsert?: UserUpsertWithoutEducationInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutEducationInput, UserUncheckedUpdateWithoutEducationInput>
  }

  export type ApplicationCreateNestedManyWithoutJobInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutJobInput>, Enumerable<ApplicationUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutJobInput>
    createMany?: ApplicationCreateManyJobInputEnvelope
    connect?: Enumerable<ApplicationWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutJobInput = {
    create?: XOR<UserCreateWithoutJobInput, UserUncheckedCreateWithoutJobInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobInput
    connect?: UserWhereUniqueInput
  }

  export type SkillCreateNestedManyWithoutJobInput = {
    create?: XOR<Enumerable<SkillCreateWithoutJobInput>, Enumerable<SkillUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutJobInput>
    createMany?: SkillCreateManyJobInputEnvelope
    connect?: Enumerable<SkillWhereUniqueInput>
  }

  export type ApplicationUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutJobInput>, Enumerable<ApplicationUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutJobInput>
    createMany?: ApplicationCreateManyJobInputEnvelope
    connect?: Enumerable<ApplicationWhereUniqueInput>
  }

  export type SkillUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<Enumerable<SkillCreateWithoutJobInput>, Enumerable<SkillUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutJobInput>
    createMany?: SkillCreateManyJobInputEnvelope
    connect?: Enumerable<SkillWhereUniqueInput>
  }

  export type ApplicationUpdateManyWithoutJobNestedInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutJobInput>, Enumerable<ApplicationUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutJobInput>
    upsert?: Enumerable<ApplicationUpsertWithWhereUniqueWithoutJobInput>
    createMany?: ApplicationCreateManyJobInputEnvelope
    set?: Enumerable<ApplicationWhereUniqueInput>
    disconnect?: Enumerable<ApplicationWhereUniqueInput>
    delete?: Enumerable<ApplicationWhereUniqueInput>
    connect?: Enumerable<ApplicationWhereUniqueInput>
    update?: Enumerable<ApplicationUpdateWithWhereUniqueWithoutJobInput>
    updateMany?: Enumerable<ApplicationUpdateManyWithWhereWithoutJobInput>
    deleteMany?: Enumerable<ApplicationScalarWhereInput>
  }

  export type UserUpdateOneWithoutJobNestedInput = {
    create?: XOR<UserCreateWithoutJobInput, UserUncheckedCreateWithoutJobInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobInput
    upsert?: UserUpsertWithoutJobInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutJobInput, UserUncheckedUpdateWithoutJobInput>
  }

  export type SkillUpdateManyWithoutJobNestedInput = {
    create?: XOR<Enumerable<SkillCreateWithoutJobInput>, Enumerable<SkillUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutJobInput>
    upsert?: Enumerable<SkillUpsertWithWhereUniqueWithoutJobInput>
    createMany?: SkillCreateManyJobInputEnvelope
    set?: Enumerable<SkillWhereUniqueInput>
    disconnect?: Enumerable<SkillWhereUniqueInput>
    delete?: Enumerable<SkillWhereUniqueInput>
    connect?: Enumerable<SkillWhereUniqueInput>
    update?: Enumerable<SkillUpdateWithWhereUniqueWithoutJobInput>
    updateMany?: Enumerable<SkillUpdateManyWithWhereWithoutJobInput>
    deleteMany?: Enumerable<SkillScalarWhereInput>
  }

  export type ApplicationUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutJobInput>, Enumerable<ApplicationUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutJobInput>
    upsert?: Enumerable<ApplicationUpsertWithWhereUniqueWithoutJobInput>
    createMany?: ApplicationCreateManyJobInputEnvelope
    set?: Enumerable<ApplicationWhereUniqueInput>
    disconnect?: Enumerable<ApplicationWhereUniqueInput>
    delete?: Enumerable<ApplicationWhereUniqueInput>
    connect?: Enumerable<ApplicationWhereUniqueInput>
    update?: Enumerable<ApplicationUpdateWithWhereUniqueWithoutJobInput>
    updateMany?: Enumerable<ApplicationUpdateManyWithWhereWithoutJobInput>
    deleteMany?: Enumerable<ApplicationScalarWhereInput>
  }

  export type SkillUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<Enumerable<SkillCreateWithoutJobInput>, Enumerable<SkillUncheckedCreateWithoutJobInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutJobInput>
    upsert?: Enumerable<SkillUpsertWithWhereUniqueWithoutJobInput>
    createMany?: SkillCreateManyJobInputEnvelope
    set?: Enumerable<SkillWhereUniqueInput>
    disconnect?: Enumerable<SkillWhereUniqueInput>
    delete?: Enumerable<SkillWhereUniqueInput>
    connect?: Enumerable<SkillWhereUniqueInput>
    update?: Enumerable<SkillUpdateWithWhereUniqueWithoutJobInput>
    updateMany?: Enumerable<SkillUpdateManyWithWhereWithoutJobInput>
    deleteMany?: Enumerable<SkillScalarWhereInput>
  }

  export type ApplicationCreateNestedOneWithoutMeetingInput = {
    create?: XOR<ApplicationCreateWithoutMeetingInput, ApplicationUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutMeetingInput
    connect?: ApplicationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMeeting_Meeting_company_idToUserInput = {
    create?: XOR<UserCreateWithoutMeeting_Meeting_company_idToUserInput, UserUncheckedCreateWithoutMeeting_Meeting_company_idToUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeeting_Meeting_company_idToUserInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMeeting_Meeting_seeker_idToUserInput = {
    create?: XOR<UserCreateWithoutMeeting_Meeting_seeker_idToUserInput, UserUncheckedCreateWithoutMeeting_Meeting_seeker_idToUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeeting_Meeting_seeker_idToUserInput
    connect?: UserWhereUniqueInput
  }

  export type ApplicationUpdateOneWithoutMeetingNestedInput = {
    create?: XOR<ApplicationCreateWithoutMeetingInput, ApplicationUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutMeetingInput
    upsert?: ApplicationUpsertWithoutMeetingInput
    disconnect?: boolean
    delete?: boolean
    connect?: ApplicationWhereUniqueInput
    update?: XOR<ApplicationUpdateWithoutMeetingInput, ApplicationUncheckedUpdateWithoutMeetingInput>
  }

  export type UserUpdateOneWithoutMeeting_Meeting_company_idToUserNestedInput = {
    create?: XOR<UserCreateWithoutMeeting_Meeting_company_idToUserInput, UserUncheckedCreateWithoutMeeting_Meeting_company_idToUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeeting_Meeting_company_idToUserInput
    upsert?: UserUpsertWithoutMeeting_Meeting_company_idToUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMeeting_Meeting_company_idToUserInput, UserUncheckedUpdateWithoutMeeting_Meeting_company_idToUserInput>
  }

  export type UserUpdateOneWithoutMeeting_Meeting_seeker_idToUserNestedInput = {
    create?: XOR<UserCreateWithoutMeeting_Meeting_seeker_idToUserInput, UserUncheckedCreateWithoutMeeting_Meeting_seeker_idToUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeeting_Meeting_seeker_idToUserInput
    upsert?: UserUpsertWithoutMeeting_Meeting_seeker_idToUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMeeting_Meeting_seeker_idToUserInput, UserUncheckedUpdateWithoutMeeting_Meeting_seeker_idToUserInput>
  }

  export type JobCreateNestedOneWithoutSkillInput = {
    create?: XOR<JobCreateWithoutSkillInput, JobUncheckedCreateWithoutSkillInput>
    connectOrCreate?: JobCreateOrConnectWithoutSkillInput
    connect?: JobWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSkillInput = {
    create?: XOR<UserCreateWithoutSkillInput, UserUncheckedCreateWithoutSkillInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillInput
    connect?: UserWhereUniqueInput
  }

  export type JobUpdateOneWithoutSkillNestedInput = {
    create?: XOR<JobCreateWithoutSkillInput, JobUncheckedCreateWithoutSkillInput>
    connectOrCreate?: JobCreateOrConnectWithoutSkillInput
    upsert?: JobUpsertWithoutSkillInput
    disconnect?: boolean
    delete?: boolean
    connect?: JobWhereUniqueInput
    update?: XOR<JobUpdateWithoutSkillInput, JobUncheckedUpdateWithoutSkillInput>
  }

  export type UserUpdateOneWithoutSkillNestedInput = {
    create?: XOR<UserCreateWithoutSkillInput, UserUncheckedCreateWithoutSkillInput>
    connectOrCreate?: UserCreateOrConnectWithoutSkillInput
    upsert?: UserUpsertWithoutSkillInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSkillInput, UserUncheckedUpdateWithoutSkillInput>
  }

  export type ApplicationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutUserInput>, Enumerable<ApplicationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutUserInput>
    createMany?: ApplicationCreateManyUserInputEnvelope
    connect?: Enumerable<ApplicationWhereUniqueInput>
  }

  export type EducationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EducationCreateWithoutUserInput>, Enumerable<EducationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EducationCreateOrConnectWithoutUserInput>
    createMany?: EducationCreateManyUserInputEnvelope
    connect?: Enumerable<EducationWhereUniqueInput>
  }

  export type JobCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<JobCreateWithoutUserInput>, Enumerable<JobUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutUserInput>
    createMany?: JobCreateManyUserInputEnvelope
    connect?: Enumerable<JobWhereUniqueInput>
  }

  export type MeetingCreateNestedManyWithoutUser_Meeting_company_idToUserInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutUser_Meeting_company_idToUserInput>, Enumerable<MeetingUncheckedCreateWithoutUser_Meeting_company_idToUserInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutUser_Meeting_company_idToUserInput>
    createMany?: MeetingCreateManyUser_Meeting_company_idToUserInputEnvelope
    connect?: Enumerable<MeetingWhereUniqueInput>
  }

  export type MeetingCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutUser_Meeting_seeker_idToUserInput>, Enumerable<MeetingUncheckedCreateWithoutUser_Meeting_seeker_idToUserInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutUser_Meeting_seeker_idToUserInput>
    createMany?: MeetingCreateManyUser_Meeting_seeker_idToUserInputEnvelope
    connect?: Enumerable<MeetingWhereUniqueInput>
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type SkillCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SkillCreateWithoutUserInput>, Enumerable<SkillUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutUserInput>
    createMany?: SkillCreateManyUserInputEnvelope
    connect?: Enumerable<SkillWhereUniqueInput>
  }

  export type Work_ExperienceCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Work_ExperienceCreateWithoutUserInput>, Enumerable<Work_ExperienceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Work_ExperienceCreateOrConnectWithoutUserInput>
    createMany?: Work_ExperienceCreateManyUserInputEnvelope
    connect?: Enumerable<Work_ExperienceWhereUniqueInput>
  }

  export type ApplicationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutUserInput>, Enumerable<ApplicationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutUserInput>
    createMany?: ApplicationCreateManyUserInputEnvelope
    connect?: Enumerable<ApplicationWhereUniqueInput>
  }

  export type EducationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EducationCreateWithoutUserInput>, Enumerable<EducationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EducationCreateOrConnectWithoutUserInput>
    createMany?: EducationCreateManyUserInputEnvelope
    connect?: Enumerable<EducationWhereUniqueInput>
  }

  export type JobUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<JobCreateWithoutUserInput>, Enumerable<JobUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutUserInput>
    createMany?: JobCreateManyUserInputEnvelope
    connect?: Enumerable<JobWhereUniqueInput>
  }

  export type MeetingUncheckedCreateNestedManyWithoutUser_Meeting_company_idToUserInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutUser_Meeting_company_idToUserInput>, Enumerable<MeetingUncheckedCreateWithoutUser_Meeting_company_idToUserInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutUser_Meeting_company_idToUserInput>
    createMany?: MeetingCreateManyUser_Meeting_company_idToUserInputEnvelope
    connect?: Enumerable<MeetingWhereUniqueInput>
  }

  export type MeetingUncheckedCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutUser_Meeting_seeker_idToUserInput>, Enumerable<MeetingUncheckedCreateWithoutUser_Meeting_seeker_idToUserInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutUser_Meeting_seeker_idToUserInput>
    createMany?: MeetingCreateManyUser_Meeting_seeker_idToUserInputEnvelope
    connect?: Enumerable<MeetingWhereUniqueInput>
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: Enumerable<NotificationWhereUniqueInput>
  }

  export type SkillUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SkillCreateWithoutUserInput>, Enumerable<SkillUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutUserInput>
    createMany?: SkillCreateManyUserInputEnvelope
    connect?: Enumerable<SkillWhereUniqueInput>
  }

  export type Work_ExperienceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Work_ExperienceCreateWithoutUserInput>, Enumerable<Work_ExperienceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Work_ExperienceCreateOrConnectWithoutUserInput>
    createMany?: Work_ExperienceCreateManyUserInputEnvelope
    connect?: Enumerable<Work_ExperienceWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ApplicationUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutUserInput>, Enumerable<ApplicationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ApplicationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ApplicationCreateManyUserInputEnvelope
    set?: Enumerable<ApplicationWhereUniqueInput>
    disconnect?: Enumerable<ApplicationWhereUniqueInput>
    delete?: Enumerable<ApplicationWhereUniqueInput>
    connect?: Enumerable<ApplicationWhereUniqueInput>
    update?: Enumerable<ApplicationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ApplicationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ApplicationScalarWhereInput>
  }

  export type EducationUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EducationCreateWithoutUserInput>, Enumerable<EducationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EducationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EducationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EducationCreateManyUserInputEnvelope
    set?: Enumerable<EducationWhereUniqueInput>
    disconnect?: Enumerable<EducationWhereUniqueInput>
    delete?: Enumerable<EducationWhereUniqueInput>
    connect?: Enumerable<EducationWhereUniqueInput>
    update?: Enumerable<EducationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EducationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EducationScalarWhereInput>
  }

  export type JobUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<JobCreateWithoutUserInput>, Enumerable<JobUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<JobUpsertWithWhereUniqueWithoutUserInput>
    createMany?: JobCreateManyUserInputEnvelope
    set?: Enumerable<JobWhereUniqueInput>
    disconnect?: Enumerable<JobWhereUniqueInput>
    delete?: Enumerable<JobWhereUniqueInput>
    connect?: Enumerable<JobWhereUniqueInput>
    update?: Enumerable<JobUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<JobUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<JobScalarWhereInput>
  }

  export type MeetingUpdateManyWithoutUser_Meeting_company_idToUserNestedInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutUser_Meeting_company_idToUserInput>, Enumerable<MeetingUncheckedCreateWithoutUser_Meeting_company_idToUserInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutUser_Meeting_company_idToUserInput>
    upsert?: Enumerable<MeetingUpsertWithWhereUniqueWithoutUser_Meeting_company_idToUserInput>
    createMany?: MeetingCreateManyUser_Meeting_company_idToUserInputEnvelope
    set?: Enumerable<MeetingWhereUniqueInput>
    disconnect?: Enumerable<MeetingWhereUniqueInput>
    delete?: Enumerable<MeetingWhereUniqueInput>
    connect?: Enumerable<MeetingWhereUniqueInput>
    update?: Enumerable<MeetingUpdateWithWhereUniqueWithoutUser_Meeting_company_idToUserInput>
    updateMany?: Enumerable<MeetingUpdateManyWithWhereWithoutUser_Meeting_company_idToUserInput>
    deleteMany?: Enumerable<MeetingScalarWhereInput>
  }

  export type MeetingUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutUser_Meeting_seeker_idToUserInput>, Enumerable<MeetingUncheckedCreateWithoutUser_Meeting_seeker_idToUserInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutUser_Meeting_seeker_idToUserInput>
    upsert?: Enumerable<MeetingUpsertWithWhereUniqueWithoutUser_Meeting_seeker_idToUserInput>
    createMany?: MeetingCreateManyUser_Meeting_seeker_idToUserInputEnvelope
    set?: Enumerable<MeetingWhereUniqueInput>
    disconnect?: Enumerable<MeetingWhereUniqueInput>
    delete?: Enumerable<MeetingWhereUniqueInput>
    connect?: Enumerable<MeetingWhereUniqueInput>
    update?: Enumerable<MeetingUpdateWithWhereUniqueWithoutUser_Meeting_seeker_idToUserInput>
    updateMany?: Enumerable<MeetingUpdateManyWithWhereWithoutUser_Meeting_seeker_idToUserInput>
    deleteMany?: Enumerable<MeetingScalarWhereInput>
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type SkillUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SkillCreateWithoutUserInput>, Enumerable<SkillUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SkillUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SkillCreateManyUserInputEnvelope
    set?: Enumerable<SkillWhereUniqueInput>
    disconnect?: Enumerable<SkillWhereUniqueInput>
    delete?: Enumerable<SkillWhereUniqueInput>
    connect?: Enumerable<SkillWhereUniqueInput>
    update?: Enumerable<SkillUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SkillUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SkillScalarWhereInput>
  }

  export type Work_ExperienceUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Work_ExperienceCreateWithoutUserInput>, Enumerable<Work_ExperienceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Work_ExperienceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Work_ExperienceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Work_ExperienceCreateManyUserInputEnvelope
    set?: Enumerable<Work_ExperienceWhereUniqueInput>
    disconnect?: Enumerable<Work_ExperienceWhereUniqueInput>
    delete?: Enumerable<Work_ExperienceWhereUniqueInput>
    connect?: Enumerable<Work_ExperienceWhereUniqueInput>
    update?: Enumerable<Work_ExperienceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Work_ExperienceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Work_ExperienceScalarWhereInput>
  }

  export type ApplicationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ApplicationCreateWithoutUserInput>, Enumerable<ApplicationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApplicationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ApplicationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ApplicationCreateManyUserInputEnvelope
    set?: Enumerable<ApplicationWhereUniqueInput>
    disconnect?: Enumerable<ApplicationWhereUniqueInput>
    delete?: Enumerable<ApplicationWhereUniqueInput>
    connect?: Enumerable<ApplicationWhereUniqueInput>
    update?: Enumerable<ApplicationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ApplicationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ApplicationScalarWhereInput>
  }

  export type EducationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EducationCreateWithoutUserInput>, Enumerable<EducationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EducationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EducationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EducationCreateManyUserInputEnvelope
    set?: Enumerable<EducationWhereUniqueInput>
    disconnect?: Enumerable<EducationWhereUniqueInput>
    delete?: Enumerable<EducationWhereUniqueInput>
    connect?: Enumerable<EducationWhereUniqueInput>
    update?: Enumerable<EducationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EducationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EducationScalarWhereInput>
  }

  export type JobUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<JobCreateWithoutUserInput>, Enumerable<JobUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<JobCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<JobUpsertWithWhereUniqueWithoutUserInput>
    createMany?: JobCreateManyUserInputEnvelope
    set?: Enumerable<JobWhereUniqueInput>
    disconnect?: Enumerable<JobWhereUniqueInput>
    delete?: Enumerable<JobWhereUniqueInput>
    connect?: Enumerable<JobWhereUniqueInput>
    update?: Enumerable<JobUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<JobUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<JobScalarWhereInput>
  }

  export type MeetingUncheckedUpdateManyWithoutUser_Meeting_company_idToUserNestedInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutUser_Meeting_company_idToUserInput>, Enumerable<MeetingUncheckedCreateWithoutUser_Meeting_company_idToUserInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutUser_Meeting_company_idToUserInput>
    upsert?: Enumerable<MeetingUpsertWithWhereUniqueWithoutUser_Meeting_company_idToUserInput>
    createMany?: MeetingCreateManyUser_Meeting_company_idToUserInputEnvelope
    set?: Enumerable<MeetingWhereUniqueInput>
    disconnect?: Enumerable<MeetingWhereUniqueInput>
    delete?: Enumerable<MeetingWhereUniqueInput>
    connect?: Enumerable<MeetingWhereUniqueInput>
    update?: Enumerable<MeetingUpdateWithWhereUniqueWithoutUser_Meeting_company_idToUserInput>
    updateMany?: Enumerable<MeetingUpdateManyWithWhereWithoutUser_Meeting_company_idToUserInput>
    deleteMany?: Enumerable<MeetingScalarWhereInput>
  }

  export type MeetingUncheckedUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput = {
    create?: XOR<Enumerable<MeetingCreateWithoutUser_Meeting_seeker_idToUserInput>, Enumerable<MeetingUncheckedCreateWithoutUser_Meeting_seeker_idToUserInput>>
    connectOrCreate?: Enumerable<MeetingCreateOrConnectWithoutUser_Meeting_seeker_idToUserInput>
    upsert?: Enumerable<MeetingUpsertWithWhereUniqueWithoutUser_Meeting_seeker_idToUserInput>
    createMany?: MeetingCreateManyUser_Meeting_seeker_idToUserInputEnvelope
    set?: Enumerable<MeetingWhereUniqueInput>
    disconnect?: Enumerable<MeetingWhereUniqueInput>
    delete?: Enumerable<MeetingWhereUniqueInput>
    connect?: Enumerable<MeetingWhereUniqueInput>
    update?: Enumerable<MeetingUpdateWithWhereUniqueWithoutUser_Meeting_seeker_idToUserInput>
    updateMany?: Enumerable<MeetingUpdateManyWithWhereWithoutUser_Meeting_seeker_idToUserInput>
    deleteMany?: Enumerable<MeetingScalarWhereInput>
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<NotificationCreateWithoutUserInput>, Enumerable<NotificationUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NotificationCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<NotificationUpsertWithWhereUniqueWithoutUserInput>
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: Enumerable<NotificationWhereUniqueInput>
    disconnect?: Enumerable<NotificationWhereUniqueInput>
    delete?: Enumerable<NotificationWhereUniqueInput>
    connect?: Enumerable<NotificationWhereUniqueInput>
    update?: Enumerable<NotificationUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<NotificationUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<NotificationScalarWhereInput>
  }

  export type SkillUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SkillCreateWithoutUserInput>, Enumerable<SkillUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SkillUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SkillCreateManyUserInputEnvelope
    set?: Enumerable<SkillWhereUniqueInput>
    disconnect?: Enumerable<SkillWhereUniqueInput>
    delete?: Enumerable<SkillWhereUniqueInput>
    connect?: Enumerable<SkillWhereUniqueInput>
    update?: Enumerable<SkillUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SkillUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SkillScalarWhereInput>
  }

  export type Work_ExperienceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<Work_ExperienceCreateWithoutUserInput>, Enumerable<Work_ExperienceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Work_ExperienceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Work_ExperienceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Work_ExperienceCreateManyUserInputEnvelope
    set?: Enumerable<Work_ExperienceWhereUniqueInput>
    disconnect?: Enumerable<Work_ExperienceWhereUniqueInput>
    delete?: Enumerable<Work_ExperienceWhereUniqueInput>
    connect?: Enumerable<Work_ExperienceWhereUniqueInput>
    update?: Enumerable<Work_ExperienceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Work_ExperienceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Work_ExperienceScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutWork_ExperienceInput = {
    create?: XOR<UserCreateWithoutWork_ExperienceInput, UserUncheckedCreateWithoutWork_ExperienceInput>
    connectOrCreate?: UserCreateOrConnectWithoutWork_ExperienceInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutWork_ExperienceNestedInput = {
    create?: XOR<UserCreateWithoutWork_ExperienceInput, UserUncheckedCreateWithoutWork_ExperienceInput>
    connectOrCreate?: UserCreateOrConnectWithoutWork_ExperienceInput
    upsert?: UserUpsertWithoutWork_ExperienceInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutWork_ExperienceInput, UserUncheckedUpdateWithoutWork_ExperienceInput>
  }

  export type UserCreateNestedOneWithoutNotificationInput = {
    create?: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationInput
    upsert?: UserUpsertWithoutNotificationInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutNotificationInput, UserUncheckedUpdateWithoutNotificationInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type JobCreateWithoutApplicationInput = {
    name?: string | null
    description?: string | null
    salary?: number | null
    location?: string | null
    close_date?: Date | string | null
    experience_type?: string | null
    employment_type?: string | null
    jobsite?: string | null
    User?: UserCreateNestedOneWithoutJobInput
    Skill?: SkillCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutApplicationInput = {
    id?: number
    name?: string | null
    company_id?: number | null
    description?: string | null
    salary?: number | null
    location?: string | null
    close_date?: Date | string | null
    experience_type?: string | null
    employment_type?: string | null
    jobsite?: string | null
    Skill?: SkillUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutApplicationInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutApplicationInput, JobUncheckedCreateWithoutApplicationInput>
  }

  export type UserCreateWithoutApplicationInput = {
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Education?: EducationCreateNestedManyWithoutUserInput
    Job?: JobCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationCreateNestedManyWithoutUserInput
    Skill?: SkillCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApplicationInput = {
    id?: number
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Education?: EducationUncheckedCreateNestedManyWithoutUserInput
    Job?: JobUncheckedCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    Skill?: SkillUncheckedCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApplicationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApplicationInput, UserUncheckedCreateWithoutApplicationInput>
  }

  export type MeetingCreateWithoutApplicationInput = {
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
    User_Meeting_company_idToUser?: UserCreateNestedOneWithoutMeeting_Meeting_company_idToUserInput
    User_Meeting_seeker_idToUser?: UserCreateNestedOneWithoutMeeting_Meeting_seeker_idToUserInput
  }

  export type MeetingUncheckedCreateWithoutApplicationInput = {
    id?: number
    seeker_id?: number | null
    company_id?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
  }

  export type MeetingCreateOrConnectWithoutApplicationInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutApplicationInput, MeetingUncheckedCreateWithoutApplicationInput>
  }

  export type MeetingCreateManyApplicationInputEnvelope = {
    data: Enumerable<MeetingCreateManyApplicationInput>
    skipDuplicates?: boolean
  }

  export type JobUpsertWithoutApplicationInput = {
    update: XOR<JobUpdateWithoutApplicationInput, JobUncheckedUpdateWithoutApplicationInput>
    create: XOR<JobCreateWithoutApplicationInput, JobUncheckedCreateWithoutApplicationInput>
  }

  export type JobUpdateWithoutApplicationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    close_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience_type?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    jobsite?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateOneWithoutJobNestedInput
    Skill?: SkillUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    close_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience_type?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    jobsite?: NullableStringFieldUpdateOperationsInput | string | null
    Skill?: SkillUncheckedUpdateManyWithoutJobNestedInput
  }

  export type UserUpsertWithoutApplicationInput = {
    update: XOR<UserUpdateWithoutApplicationInput, UserUncheckedUpdateWithoutApplicationInput>
    create: XOR<UserCreateWithoutApplicationInput, UserUncheckedCreateWithoutApplicationInput>
  }

  export type UserUpdateWithoutApplicationInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Education?: EducationUpdateManyWithoutUserNestedInput
    Job?: JobUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUpdateManyWithoutUserNestedInput
    Skill?: SkillUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    Job?: JobUncheckedUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    Skill?: SkillUncheckedUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MeetingUpsertWithWhereUniqueWithoutApplicationInput = {
    where: MeetingWhereUniqueInput
    update: XOR<MeetingUpdateWithoutApplicationInput, MeetingUncheckedUpdateWithoutApplicationInput>
    create: XOR<MeetingCreateWithoutApplicationInput, MeetingUncheckedCreateWithoutApplicationInput>
  }

  export type MeetingUpdateWithWhereUniqueWithoutApplicationInput = {
    where: MeetingWhereUniqueInput
    data: XOR<MeetingUpdateWithoutApplicationInput, MeetingUncheckedUpdateWithoutApplicationInput>
  }

  export type MeetingUpdateManyWithWhereWithoutApplicationInput = {
    where: MeetingScalarWhereInput
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyWithoutMeetingInput>
  }

  export type MeetingScalarWhereInput = {
    AND?: Enumerable<MeetingScalarWhereInput>
    OR?: Enumerable<MeetingScalarWhereInput>
    NOT?: Enumerable<MeetingScalarWhereInput>
    id?: IntFilter | number
    seeker_id?: IntNullableFilter | number | null
    company_id?: IntNullableFilter | number | null
    start_time?: DateTimeNullableFilter | Date | string | null
    end_time?: DateTimeNullableFilter | Date | string | null
    description?: StringNullableFilter | string | null
    application_id?: IntNullableFilter | number | null
    canceled?: BoolNullableFilter | boolean | null
    seeker_accepted?: BoolNullableFilter | boolean | null
    private?: BoolNullableFilter | boolean | null
    title?: StringNullableFilter | string | null
  }

  export type UserCreateWithoutEducationInput = {
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationCreateNestedManyWithoutUserInput
    Job?: JobCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationCreateNestedManyWithoutUserInput
    Skill?: SkillCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEducationInput = {
    id?: number
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    Job?: JobUncheckedCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    Skill?: SkillUncheckedCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEducationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEducationInput, UserUncheckedCreateWithoutEducationInput>
  }

  export type UserUpsertWithoutEducationInput = {
    update: XOR<UserUpdateWithoutEducationInput, UserUncheckedUpdateWithoutEducationInput>
    create: XOR<UserCreateWithoutEducationInput, UserUncheckedCreateWithoutEducationInput>
  }

  export type UserUpdateWithoutEducationInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateManyWithoutUserNestedInput
    Job?: JobUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUpdateManyWithoutUserNestedInput
    Skill?: SkillUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEducationInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    Job?: JobUncheckedUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    Skill?: SkillUncheckedUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ApplicationCreateWithoutJobInput = {
    seeker_notes?: string | null
    company_notes?: string | null
    seeker_interest_level?: string | null
    company_interest_level?: string | null
    User?: UserCreateNestedOneWithoutApplicationInput
    Meeting?: MeetingCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutJobInput = {
    id?: number
    seeker_id?: number | null
    seeker_notes?: string | null
    company_notes?: string | null
    seeker_interest_level?: string | null
    company_interest_level?: string | null
    Meeting?: MeetingUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput>
  }

  export type ApplicationCreateManyJobInputEnvelope = {
    data: Enumerable<ApplicationCreateManyJobInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutJobInput = {
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationCreateNestedManyWithoutUserInput
    Education?: EducationCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationCreateNestedManyWithoutUserInput
    Skill?: SkillCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutJobInput = {
    id?: number
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    Education?: EducationUncheckedCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    Skill?: SkillUncheckedCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutJobInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJobInput, UserUncheckedCreateWithoutJobInput>
  }

  export type SkillCreateWithoutJobInput = {
    skill?: string | null
    User?: UserCreateNestedOneWithoutSkillInput
  }

  export type SkillUncheckedCreateWithoutJobInput = {
    id?: number
    seeker_id?: number | null
    skill?: string | null
  }

  export type SkillCreateOrConnectWithoutJobInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutJobInput, SkillUncheckedCreateWithoutJobInput>
  }

  export type SkillCreateManyJobInputEnvelope = {
    data: Enumerable<SkillCreateManyJobInput>
    skipDuplicates?: boolean
  }

  export type ApplicationUpsertWithWhereUniqueWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutJobInput, ApplicationUncheckedUpdateWithoutJobInput>
    create: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutJobInput, ApplicationUncheckedUpdateWithoutJobInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutJobInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutApplicationInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: Enumerable<ApplicationScalarWhereInput>
    OR?: Enumerable<ApplicationScalarWhereInput>
    NOT?: Enumerable<ApplicationScalarWhereInput>
    id?: IntFilter | number
    job_id?: IntNullableFilter | number | null
    seeker_id?: IntNullableFilter | number | null
    seeker_notes?: StringNullableFilter | string | null
    company_notes?: StringNullableFilter | string | null
    seeker_interest_level?: StringNullableFilter | string | null
    company_interest_level?: StringNullableFilter | string | null
  }

  export type UserUpsertWithoutJobInput = {
    update: XOR<UserUpdateWithoutJobInput, UserUncheckedUpdateWithoutJobInput>
    create: XOR<UserCreateWithoutJobInput, UserUncheckedCreateWithoutJobInput>
  }

  export type UserUpdateWithoutJobInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateManyWithoutUserNestedInput
    Education?: EducationUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUpdateManyWithoutUserNestedInput
    Skill?: SkillUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    Education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    Skill?: SkillUncheckedUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SkillUpsertWithWhereUniqueWithoutJobInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutJobInput, SkillUncheckedUpdateWithoutJobInput>
    create: XOR<SkillCreateWithoutJobInput, SkillUncheckedCreateWithoutJobInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutJobInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutJobInput, SkillUncheckedUpdateWithoutJobInput>
  }

  export type SkillUpdateManyWithWhereWithoutJobInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutSkillInput>
  }

  export type SkillScalarWhereInput = {
    AND?: Enumerable<SkillScalarWhereInput>
    OR?: Enumerable<SkillScalarWhereInput>
    NOT?: Enumerable<SkillScalarWhereInput>
    id?: IntFilter | number
    job_id?: IntNullableFilter | number | null
    seeker_id?: IntNullableFilter | number | null
    skill?: StringNullableFilter | string | null
  }

  export type ApplicationCreateWithoutMeetingInput = {
    seeker_notes?: string | null
    company_notes?: string | null
    seeker_interest_level?: string | null
    company_interest_level?: string | null
    Job?: JobCreateNestedOneWithoutApplicationInput
    User?: UserCreateNestedOneWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutMeetingInput = {
    id?: number
    job_id?: number | null
    seeker_id?: number | null
    seeker_notes?: string | null
    company_notes?: string | null
    seeker_interest_level?: string | null
    company_interest_level?: string | null
  }

  export type ApplicationCreateOrConnectWithoutMeetingInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutMeetingInput, ApplicationUncheckedCreateWithoutMeetingInput>
  }

  export type UserCreateWithoutMeeting_Meeting_company_idToUserInput = {
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationCreateNestedManyWithoutUserInput
    Education?: EducationCreateNestedManyWithoutUserInput
    Job?: JobCreateNestedManyWithoutUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationCreateNestedManyWithoutUserInput
    Skill?: SkillCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMeeting_Meeting_company_idToUserInput = {
    id?: number
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    Education?: EducationUncheckedCreateNestedManyWithoutUserInput
    Job?: JobUncheckedCreateNestedManyWithoutUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    Skill?: SkillUncheckedCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMeeting_Meeting_company_idToUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMeeting_Meeting_company_idToUserInput, UserUncheckedCreateWithoutMeeting_Meeting_company_idToUserInput>
  }

  export type UserCreateWithoutMeeting_Meeting_seeker_idToUserInput = {
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationCreateNestedManyWithoutUserInput
    Education?: EducationCreateNestedManyWithoutUserInput
    Job?: JobCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Notification?: NotificationCreateNestedManyWithoutUserInput
    Skill?: SkillCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMeeting_Meeting_seeker_idToUserInput = {
    id?: number
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    Education?: EducationUncheckedCreateNestedManyWithoutUserInput
    Job?: JobUncheckedCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    Skill?: SkillUncheckedCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMeeting_Meeting_seeker_idToUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMeeting_Meeting_seeker_idToUserInput, UserUncheckedCreateWithoutMeeting_Meeting_seeker_idToUserInput>
  }

  export type ApplicationUpsertWithoutMeetingInput = {
    update: XOR<ApplicationUpdateWithoutMeetingInput, ApplicationUncheckedUpdateWithoutMeetingInput>
    create: XOR<ApplicationCreateWithoutMeetingInput, ApplicationUncheckedCreateWithoutMeetingInput>
  }

  export type ApplicationUpdateWithoutMeetingInput = {
    seeker_notes?: NullableStringFieldUpdateOperationsInput | string | null
    company_notes?: NullableStringFieldUpdateOperationsInput | string | null
    seeker_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    company_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    Job?: JobUpdateOneWithoutApplicationNestedInput
    User?: UserUpdateOneWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutMeetingInput = {
    id?: IntFieldUpdateOperationsInput | number
    job_id?: NullableIntFieldUpdateOperationsInput | number | null
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    seeker_notes?: NullableStringFieldUpdateOperationsInput | string | null
    company_notes?: NullableStringFieldUpdateOperationsInput | string | null
    seeker_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    company_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutMeeting_Meeting_company_idToUserInput = {
    update: XOR<UserUpdateWithoutMeeting_Meeting_company_idToUserInput, UserUncheckedUpdateWithoutMeeting_Meeting_company_idToUserInput>
    create: XOR<UserCreateWithoutMeeting_Meeting_company_idToUserInput, UserUncheckedCreateWithoutMeeting_Meeting_company_idToUserInput>
  }

  export type UserUpdateWithoutMeeting_Meeting_company_idToUserInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateManyWithoutUserNestedInput
    Education?: EducationUpdateManyWithoutUserNestedInput
    Job?: JobUpdateManyWithoutUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUpdateManyWithoutUserNestedInput
    Skill?: SkillUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMeeting_Meeting_company_idToUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    Education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    Job?: JobUncheckedUpdateManyWithoutUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    Skill?: SkillUncheckedUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutMeeting_Meeting_seeker_idToUserInput = {
    update: XOR<UserUpdateWithoutMeeting_Meeting_seeker_idToUserInput, UserUncheckedUpdateWithoutMeeting_Meeting_seeker_idToUserInput>
    create: XOR<UserCreateWithoutMeeting_Meeting_seeker_idToUserInput, UserUncheckedCreateWithoutMeeting_Meeting_seeker_idToUserInput>
  }

  export type UserUpdateWithoutMeeting_Meeting_seeker_idToUserInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateManyWithoutUserNestedInput
    Education?: EducationUpdateManyWithoutUserNestedInput
    Job?: JobUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Notification?: NotificationUpdateManyWithoutUserNestedInput
    Skill?: SkillUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMeeting_Meeting_seeker_idToUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    Education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    Job?: JobUncheckedUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    Skill?: SkillUncheckedUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JobCreateWithoutSkillInput = {
    name?: string | null
    description?: string | null
    salary?: number | null
    location?: string | null
    close_date?: Date | string | null
    experience_type?: string | null
    employment_type?: string | null
    jobsite?: string | null
    Application?: ApplicationCreateNestedManyWithoutJobInput
    User?: UserCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutSkillInput = {
    id?: number
    name?: string | null
    company_id?: number | null
    description?: string | null
    salary?: number | null
    location?: string | null
    close_date?: Date | string | null
    experience_type?: string | null
    employment_type?: string | null
    jobsite?: string | null
    Application?: ApplicationUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutSkillInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutSkillInput, JobUncheckedCreateWithoutSkillInput>
  }

  export type UserCreateWithoutSkillInput = {
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationCreateNestedManyWithoutUserInput
    Education?: EducationCreateNestedManyWithoutUserInput
    Job?: JobCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSkillInput = {
    id?: number
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    Education?: EducationUncheckedCreateNestedManyWithoutUserInput
    Job?: JobUncheckedCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSkillInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSkillInput, UserUncheckedCreateWithoutSkillInput>
  }

  export type JobUpsertWithoutSkillInput = {
    update: XOR<JobUpdateWithoutSkillInput, JobUncheckedUpdateWithoutSkillInput>
    create: XOR<JobCreateWithoutSkillInput, JobUncheckedCreateWithoutSkillInput>
  }

  export type JobUpdateWithoutSkillInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    close_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience_type?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    jobsite?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateManyWithoutJobNestedInput
    User?: UserUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutSkillInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    close_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience_type?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    jobsite?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
  }

  export type UserUpsertWithoutSkillInput = {
    update: XOR<UserUpdateWithoutSkillInput, UserUncheckedUpdateWithoutSkillInput>
    create: XOR<UserCreateWithoutSkillInput, UserUncheckedCreateWithoutSkillInput>
  }

  export type UserUpdateWithoutSkillInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateManyWithoutUserNestedInput
    Education?: EducationUpdateManyWithoutUserNestedInput
    Job?: JobUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSkillInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    Education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    Job?: JobUncheckedUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ApplicationCreateWithoutUserInput = {
    seeker_notes?: string | null
    company_notes?: string | null
    seeker_interest_level?: string | null
    company_interest_level?: string | null
    Job?: JobCreateNestedOneWithoutApplicationInput
    Meeting?: MeetingCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutUserInput = {
    id?: number
    job_id?: number | null
    seeker_notes?: string | null
    company_notes?: string | null
    seeker_interest_level?: string | null
    company_interest_level?: string | null
    Meeting?: MeetingUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput>
  }

  export type ApplicationCreateManyUserInputEnvelope = {
    data: Enumerable<ApplicationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type EducationCreateWithoutUserInput = {
    school?: string | null
    location?: string | null
    degree?: string | null
    major?: string | null
    graduate?: boolean | null
    graduation_date?: Date | string | null
  }

  export type EducationUncheckedCreateWithoutUserInput = {
    id?: number
    school?: string | null
    location?: string | null
    degree?: string | null
    major?: string | null
    graduate?: boolean | null
    graduation_date?: Date | string | null
  }

  export type EducationCreateOrConnectWithoutUserInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutUserInput, EducationUncheckedCreateWithoutUserInput>
  }

  export type EducationCreateManyUserInputEnvelope = {
    data: Enumerable<EducationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type JobCreateWithoutUserInput = {
    name?: string | null
    description?: string | null
    salary?: number | null
    location?: string | null
    close_date?: Date | string | null
    experience_type?: string | null
    employment_type?: string | null
    jobsite?: string | null
    Application?: ApplicationCreateNestedManyWithoutJobInput
    Skill?: SkillCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutUserInput = {
    id?: number
    name?: string | null
    description?: string | null
    salary?: number | null
    location?: string | null
    close_date?: Date | string | null
    experience_type?: string | null
    employment_type?: string | null
    jobsite?: string | null
    Application?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    Skill?: SkillUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutUserInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutUserInput, JobUncheckedCreateWithoutUserInput>
  }

  export type JobCreateManyUserInputEnvelope = {
    data: Enumerable<JobCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type MeetingCreateWithoutUser_Meeting_company_idToUserInput = {
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
    Application?: ApplicationCreateNestedOneWithoutMeetingInput
    User_Meeting_seeker_idToUser?: UserCreateNestedOneWithoutMeeting_Meeting_seeker_idToUserInput
  }

  export type MeetingUncheckedCreateWithoutUser_Meeting_company_idToUserInput = {
    id?: number
    seeker_id?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    application_id?: number | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
  }

  export type MeetingCreateOrConnectWithoutUser_Meeting_company_idToUserInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutUser_Meeting_company_idToUserInput, MeetingUncheckedCreateWithoutUser_Meeting_company_idToUserInput>
  }

  export type MeetingCreateManyUser_Meeting_company_idToUserInputEnvelope = {
    data: Enumerable<MeetingCreateManyUser_Meeting_company_idToUserInput>
    skipDuplicates?: boolean
  }

  export type MeetingCreateWithoutUser_Meeting_seeker_idToUserInput = {
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
    Application?: ApplicationCreateNestedOneWithoutMeetingInput
    User_Meeting_company_idToUser?: UserCreateNestedOneWithoutMeeting_Meeting_company_idToUserInput
  }

  export type MeetingUncheckedCreateWithoutUser_Meeting_seeker_idToUserInput = {
    id?: number
    company_id?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    application_id?: number | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
  }

  export type MeetingCreateOrConnectWithoutUser_Meeting_seeker_idToUserInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutUser_Meeting_seeker_idToUserInput, MeetingUncheckedCreateWithoutUser_Meeting_seeker_idToUserInput>
  }

  export type MeetingCreateManyUser_Meeting_seeker_idToUserInputEnvelope = {
    data: Enumerable<MeetingCreateManyUser_Meeting_seeker_idToUserInput>
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    type?: string | null
    details?: string | null
    read?: boolean | null
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    type?: string | null
    details?: string | null
    read?: boolean | null
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: Enumerable<NotificationCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SkillCreateWithoutUserInput = {
    skill?: string | null
    Job?: JobCreateNestedOneWithoutSkillInput
  }

  export type SkillUncheckedCreateWithoutUserInput = {
    id?: number
    job_id?: number | null
    skill?: string | null
  }

  export type SkillCreateOrConnectWithoutUserInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutUserInput, SkillUncheckedCreateWithoutUserInput>
  }

  export type SkillCreateManyUserInputEnvelope = {
    data: Enumerable<SkillCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type Work_ExperienceCreateWithoutUserInput = {
    job_details?: string | null
    company_name?: string | null
    location?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
  }

  export type Work_ExperienceUncheckedCreateWithoutUserInput = {
    id?: number
    job_details?: string | null
    company_name?: string | null
    location?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
  }

  export type Work_ExperienceCreateOrConnectWithoutUserInput = {
    where: Work_ExperienceWhereUniqueInput
    create: XOR<Work_ExperienceCreateWithoutUserInput, Work_ExperienceUncheckedCreateWithoutUserInput>
  }

  export type Work_ExperienceCreateManyUserInputEnvelope = {
    data: Enumerable<Work_ExperienceCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ApplicationUpsertWithWhereUniqueWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutUserInput, ApplicationUncheckedUpdateWithoutUserInput>
    create: XOR<ApplicationCreateWithoutUserInput, ApplicationUncheckedCreateWithoutUserInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutUserInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutUserInput, ApplicationUncheckedUpdateWithoutUserInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutUserInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutApplicationInput>
  }

  export type EducationUpsertWithWhereUniqueWithoutUserInput = {
    where: EducationWhereUniqueInput
    update: XOR<EducationUpdateWithoutUserInput, EducationUncheckedUpdateWithoutUserInput>
    create: XOR<EducationCreateWithoutUserInput, EducationUncheckedCreateWithoutUserInput>
  }

  export type EducationUpdateWithWhereUniqueWithoutUserInput = {
    where: EducationWhereUniqueInput
    data: XOR<EducationUpdateWithoutUserInput, EducationUncheckedUpdateWithoutUserInput>
  }

  export type EducationUpdateManyWithWhereWithoutUserInput = {
    where: EducationScalarWhereInput
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyWithoutEducationInput>
  }

  export type EducationScalarWhereInput = {
    AND?: Enumerable<EducationScalarWhereInput>
    OR?: Enumerable<EducationScalarWhereInput>
    NOT?: Enumerable<EducationScalarWhereInput>
    id?: IntFilter | number
    seeker_id?: IntNullableFilter | number | null
    school?: StringNullableFilter | string | null
    location?: StringNullableFilter | string | null
    degree?: StringNullableFilter | string | null
    major?: StringNullableFilter | string | null
    graduate?: BoolNullableFilter | boolean | null
    graduation_date?: DateTimeNullableFilter | Date | string | null
  }

  export type JobUpsertWithWhereUniqueWithoutUserInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutUserInput, JobUncheckedUpdateWithoutUserInput>
    create: XOR<JobCreateWithoutUserInput, JobUncheckedCreateWithoutUserInput>
  }

  export type JobUpdateWithWhereUniqueWithoutUserInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutUserInput, JobUncheckedUpdateWithoutUserInput>
  }

  export type JobUpdateManyWithWhereWithoutUserInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutJobInput>
  }

  export type JobScalarWhereInput = {
    AND?: Enumerable<JobScalarWhereInput>
    OR?: Enumerable<JobScalarWhereInput>
    NOT?: Enumerable<JobScalarWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    company_id?: IntNullableFilter | number | null
    description?: StringNullableFilter | string | null
    salary?: IntNullableFilter | number | null
    location?: StringNullableFilter | string | null
    close_date?: DateTimeNullableFilter | Date | string | null
    experience_type?: StringNullableFilter | string | null
    employment_type?: StringNullableFilter | string | null
    jobsite?: StringNullableFilter | string | null
  }

  export type MeetingUpsertWithWhereUniqueWithoutUser_Meeting_company_idToUserInput = {
    where: MeetingWhereUniqueInput
    update: XOR<MeetingUpdateWithoutUser_Meeting_company_idToUserInput, MeetingUncheckedUpdateWithoutUser_Meeting_company_idToUserInput>
    create: XOR<MeetingCreateWithoutUser_Meeting_company_idToUserInput, MeetingUncheckedCreateWithoutUser_Meeting_company_idToUserInput>
  }

  export type MeetingUpdateWithWhereUniqueWithoutUser_Meeting_company_idToUserInput = {
    where: MeetingWhereUniqueInput
    data: XOR<MeetingUpdateWithoutUser_Meeting_company_idToUserInput, MeetingUncheckedUpdateWithoutUser_Meeting_company_idToUserInput>
  }

  export type MeetingUpdateManyWithWhereWithoutUser_Meeting_company_idToUserInput = {
    where: MeetingScalarWhereInput
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyWithoutMeeting_Meeting_company_idToUserInput>
  }

  export type MeetingUpsertWithWhereUniqueWithoutUser_Meeting_seeker_idToUserInput = {
    where: MeetingWhereUniqueInput
    update: XOR<MeetingUpdateWithoutUser_Meeting_seeker_idToUserInput, MeetingUncheckedUpdateWithoutUser_Meeting_seeker_idToUserInput>
    create: XOR<MeetingCreateWithoutUser_Meeting_seeker_idToUserInput, MeetingUncheckedCreateWithoutUser_Meeting_seeker_idToUserInput>
  }

  export type MeetingUpdateWithWhereUniqueWithoutUser_Meeting_seeker_idToUserInput = {
    where: MeetingWhereUniqueInput
    data: XOR<MeetingUpdateWithoutUser_Meeting_seeker_idToUserInput, MeetingUncheckedUpdateWithoutUser_Meeting_seeker_idToUserInput>
  }

  export type MeetingUpdateManyWithWhereWithoutUser_Meeting_seeker_idToUserInput = {
    where: MeetingScalarWhereInput
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyWithoutMeeting_Meeting_seeker_idToUserInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutNotificationInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: Enumerable<NotificationScalarWhereInput>
    OR?: Enumerable<NotificationScalarWhereInput>
    NOT?: Enumerable<NotificationScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    type?: StringNullableFilter | string | null
    details?: StringNullableFilter | string | null
    read?: BoolNullableFilter | boolean | null
  }

  export type SkillUpsertWithWhereUniqueWithoutUserInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutUserInput, SkillUncheckedUpdateWithoutUserInput>
    create: XOR<SkillCreateWithoutUserInput, SkillUncheckedCreateWithoutUserInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutUserInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutUserInput, SkillUncheckedUpdateWithoutUserInput>
  }

  export type SkillUpdateManyWithWhereWithoutUserInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutSkillInput>
  }

  export type Work_ExperienceUpsertWithWhereUniqueWithoutUserInput = {
    where: Work_ExperienceWhereUniqueInput
    update: XOR<Work_ExperienceUpdateWithoutUserInput, Work_ExperienceUncheckedUpdateWithoutUserInput>
    create: XOR<Work_ExperienceCreateWithoutUserInput, Work_ExperienceUncheckedCreateWithoutUserInput>
  }

  export type Work_ExperienceUpdateWithWhereUniqueWithoutUserInput = {
    where: Work_ExperienceWhereUniqueInput
    data: XOR<Work_ExperienceUpdateWithoutUserInput, Work_ExperienceUncheckedUpdateWithoutUserInput>
  }

  export type Work_ExperienceUpdateManyWithWhereWithoutUserInput = {
    where: Work_ExperienceScalarWhereInput
    data: XOR<Work_ExperienceUpdateManyMutationInput, Work_ExperienceUncheckedUpdateManyWithoutWork_ExperienceInput>
  }

  export type Work_ExperienceScalarWhereInput = {
    AND?: Enumerable<Work_ExperienceScalarWhereInput>
    OR?: Enumerable<Work_ExperienceScalarWhereInput>
    NOT?: Enumerable<Work_ExperienceScalarWhereInput>
    id?: IntFilter | number
    seeker_id?: IntNullableFilter | number | null
    job_details?: StringNullableFilter | string | null
    company_name?: StringNullableFilter | string | null
    location?: StringNullableFilter | string | null
    start_date?: DateTimeNullableFilter | Date | string | null
    end_date?: DateTimeNullableFilter | Date | string | null
  }

  export type UserCreateWithoutWork_ExperienceInput = {
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationCreateNestedManyWithoutUserInput
    Education?: EducationCreateNestedManyWithoutUserInput
    Job?: JobCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationCreateNestedManyWithoutUserInput
    Skill?: SkillCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWork_ExperienceInput = {
    id?: number
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    Education?: EducationUncheckedCreateNestedManyWithoutUserInput
    Job?: JobUncheckedCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutUserInput
    Skill?: SkillUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWork_ExperienceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWork_ExperienceInput, UserUncheckedCreateWithoutWork_ExperienceInput>
  }

  export type UserUpsertWithoutWork_ExperienceInput = {
    update: XOR<UserUpdateWithoutWork_ExperienceInput, UserUncheckedUpdateWithoutWork_ExperienceInput>
    create: XOR<UserCreateWithoutWork_ExperienceInput, UserUncheckedCreateWithoutWork_ExperienceInput>
  }

  export type UserUpdateWithoutWork_ExperienceInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateManyWithoutUserNestedInput
    Education?: EducationUpdateManyWithoutUserNestedInput
    Job?: JobUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUpdateManyWithoutUserNestedInput
    Skill?: SkillUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWork_ExperienceInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    Education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    Job?: JobUncheckedUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    Skill?: SkillUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotificationInput = {
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationCreateNestedManyWithoutUserInput
    Education?: EducationCreateNestedManyWithoutUserInput
    Job?: JobCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Skill?: SkillCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationInput = {
    id?: number
    first_name?: string | null
    last_name?: string | null
    email: string
    password: string
    company_name?: string | null
    role?: string | null
    image_url?: string | null
    address?: string | null
    address_2?: string | null
    city?: string | null
    state?: string | null
    zip_code?: string | null
    Application?: ApplicationUncheckedCreateNestedManyWithoutUserInput
    Education?: EducationUncheckedCreateNestedManyWithoutUserInput
    Job?: JobUncheckedCreateNestedManyWithoutUserInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_company_idToUserInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedCreateNestedManyWithoutUser_Meeting_seeker_idToUserInput
    Skill?: SkillUncheckedCreateNestedManyWithoutUserInput
    Work_Experience?: Work_ExperienceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
  }

  export type UserUpsertWithoutNotificationInput = {
    update: XOR<UserUpdateWithoutNotificationInput, UserUncheckedUpdateWithoutNotificationInput>
    create: XOR<UserCreateWithoutNotificationInput, UserUncheckedCreateWithoutNotificationInput>
  }

  export type UserUpdateWithoutNotificationInput = {
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateManyWithoutUserNestedInput
    Education?: EducationUpdateManyWithoutUserNestedInput
    Job?: JobUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Skill?: SkillUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    address_2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUncheckedUpdateManyWithoutUserNestedInput
    Education?: EducationUncheckedUpdateManyWithoutUserNestedInput
    Job?: JobUncheckedUpdateManyWithoutUserNestedInput
    Meeting_Meeting_company_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_company_idToUserNestedInput
    Meeting_Meeting_seeker_idToUser?: MeetingUncheckedUpdateManyWithoutUser_Meeting_seeker_idToUserNestedInput
    Skill?: SkillUncheckedUpdateManyWithoutUserNestedInput
    Work_Experience?: Work_ExperienceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MeetingCreateManyApplicationInput = {
    id?: number
    seeker_id?: number | null
    company_id?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
  }

  export type MeetingUpdateWithoutApplicationInput = {
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    User_Meeting_company_idToUser?: UserUpdateOneWithoutMeeting_Meeting_company_idToUserNestedInput
    User_Meeting_seeker_idToUser?: UserUpdateOneWithoutMeeting_Meeting_seeker_idToUserNestedInput
  }

  export type MeetingUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MeetingUncheckedUpdateManyWithoutMeetingInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationCreateManyJobInput = {
    id?: number
    seeker_id?: number | null
    seeker_notes?: string | null
    company_notes?: string | null
    seeker_interest_level?: string | null
    company_interest_level?: string | null
  }

  export type SkillCreateManyJobInput = {
    id?: number
    seeker_id?: number | null
    skill?: string | null
  }

  export type ApplicationUpdateWithoutJobInput = {
    seeker_notes?: NullableStringFieldUpdateOperationsInput | string | null
    company_notes?: NullableStringFieldUpdateOperationsInput | string | null
    seeker_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    company_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateOneWithoutApplicationNestedInput
    Meeting?: MeetingUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    seeker_notes?: NullableStringFieldUpdateOperationsInput | string | null
    company_notes?: NullableStringFieldUpdateOperationsInput | string | null
    seeker_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    company_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    Meeting?: MeetingUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    seeker_notes?: NullableStringFieldUpdateOperationsInput | string | null
    company_notes?: NullableStringFieldUpdateOperationsInput | string | null
    seeker_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    company_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SkillUpdateWithoutJobInput = {
    skill?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateOneWithoutSkillNestedInput
  }

  export type SkillUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    skill?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SkillUncheckedUpdateManyWithoutSkillInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    skill?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationCreateManyUserInput = {
    id?: number
    job_id?: number | null
    seeker_notes?: string | null
    company_notes?: string | null
    seeker_interest_level?: string | null
    company_interest_level?: string | null
  }

  export type EducationCreateManyUserInput = {
    id?: number
    school?: string | null
    location?: string | null
    degree?: string | null
    major?: string | null
    graduate?: boolean | null
    graduation_date?: Date | string | null
  }

  export type JobCreateManyUserInput = {
    id?: number
    name?: string | null
    description?: string | null
    salary?: number | null
    location?: string | null
    close_date?: Date | string | null
    experience_type?: string | null
    employment_type?: string | null
    jobsite?: string | null
  }

  export type MeetingCreateManyUser_Meeting_company_idToUserInput = {
    id?: number
    seeker_id?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    application_id?: number | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
  }

  export type MeetingCreateManyUser_Meeting_seeker_idToUserInput = {
    id?: number
    company_id?: number | null
    start_time?: Date | string | null
    end_time?: Date | string | null
    description?: string | null
    application_id?: number | null
    canceled?: boolean | null
    seeker_accepted?: boolean | null
    private?: boolean | null
    title?: string | null
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    type?: string | null
    details?: string | null
    read?: boolean | null
  }

  export type SkillCreateManyUserInput = {
    id?: number
    job_id?: number | null
    skill?: string | null
  }

  export type Work_ExperienceCreateManyUserInput = {
    id?: number
    job_details?: string | null
    company_name?: string | null
    location?: string | null
    start_date?: Date | string | null
    end_date?: Date | string | null
  }

  export type ApplicationUpdateWithoutUserInput = {
    seeker_notes?: NullableStringFieldUpdateOperationsInput | string | null
    company_notes?: NullableStringFieldUpdateOperationsInput | string | null
    seeker_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    company_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    Job?: JobUpdateOneWithoutApplicationNestedInput
    Meeting?: MeetingUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    job_id?: NullableIntFieldUpdateOperationsInput | number | null
    seeker_notes?: NullableStringFieldUpdateOperationsInput | string | null
    company_notes?: NullableStringFieldUpdateOperationsInput | string | null
    seeker_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    company_interest_level?: NullableStringFieldUpdateOperationsInput | string | null
    Meeting?: MeetingUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type EducationUpdateWithoutUserInput = {
    school?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    graduate?: NullableBoolFieldUpdateOperationsInput | boolean | null
    graduation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EducationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    school?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    graduate?: NullableBoolFieldUpdateOperationsInput | boolean | null
    graduation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EducationUncheckedUpdateManyWithoutEducationInput = {
    id?: IntFieldUpdateOperationsInput | number
    school?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: NullableStringFieldUpdateOperationsInput | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    graduate?: NullableBoolFieldUpdateOperationsInput | boolean | null
    graduation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JobUpdateWithoutUserInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    close_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience_type?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    jobsite?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateManyWithoutJobNestedInput
    Skill?: SkillUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    close_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience_type?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    jobsite?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    Skill?: SkillUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    close_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    experience_type?: NullableStringFieldUpdateOperationsInput | string | null
    employment_type?: NullableStringFieldUpdateOperationsInput | string | null
    jobsite?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MeetingUpdateWithoutUser_Meeting_company_idToUserInput = {
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateOneWithoutMeetingNestedInput
    User_Meeting_seeker_idToUser?: UserUpdateOneWithoutMeeting_Meeting_seeker_idToUserNestedInput
  }

  export type MeetingUncheckedUpdateWithoutUser_Meeting_company_idToUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    application_id?: NullableIntFieldUpdateOperationsInput | number | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MeetingUncheckedUpdateManyWithoutMeeting_Meeting_company_idToUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    seeker_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    application_id?: NullableIntFieldUpdateOperationsInput | number | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MeetingUpdateWithoutUser_Meeting_seeker_idToUserInput = {
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    Application?: ApplicationUpdateOneWithoutMeetingNestedInput
    User_Meeting_company_idToUser?: UserUpdateOneWithoutMeeting_Meeting_company_idToUserNestedInput
  }

  export type MeetingUncheckedUpdateWithoutUser_Meeting_seeker_idToUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    application_id?: NullableIntFieldUpdateOperationsInput | number | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MeetingUncheckedUpdateManyWithoutMeeting_Meeting_seeker_idToUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    start_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    application_id?: NullableIntFieldUpdateOperationsInput | number | null
    canceled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    seeker_accepted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    private?: NullableBoolFieldUpdateOperationsInput | boolean | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUpdateWithoutUserInput = {
    type?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type NotificationUncheckedUpdateManyWithoutNotificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: NullableStringFieldUpdateOperationsInput | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    read?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SkillUpdateWithoutUserInput = {
    skill?: NullableStringFieldUpdateOperationsInput | string | null
    Job?: JobUpdateOneWithoutSkillNestedInput
  }

  export type SkillUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    job_id?: NullableIntFieldUpdateOperationsInput | number | null
    skill?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Work_ExperienceUpdateWithoutUserInput = {
    job_details?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Work_ExperienceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    job_details?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Work_ExperienceUncheckedUpdateManyWithoutWork_ExperienceInput = {
    id?: IntFieldUpdateOperationsInput | number
    job_details?: NullableStringFieldUpdateOperationsInput | string | null
    company_name?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}